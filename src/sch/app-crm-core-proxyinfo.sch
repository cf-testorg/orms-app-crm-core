(let ((ctx (getContext ctx "core"))) (let ((ctx (getContext ctx "AppCrmCore"))) (bindHome ctx com.redknee.service.proxy.PluginInfoHome.class com.redknee.service.proxy.PluginInfo.class)))
(let ((ctx (getContext ctx "core"))) (let ((ctx (getContext ctx "AppCrmCore"))) (homeCreateOrStore (.get ctx com.redknee.service.proxy.PluginInfoHome.class) (let ((b (com.redknee.service.proxy.PluginInfo.))) (setBeanProperty b "Name" "SubscriberBucketProvisionV5")(setBeanProperty b "JarFile" "")(setBeanProperty b "ServiceInterface" "com.redknee.product.bundle.manager.provision.v5_0.bucket.SubscriberBucketProvision")(setBeanProperty b "ClassName" "com.redknee.app.urcs.client.bmgt.SubscriberBucketProvisionV5Plugin")(setBeanProperty b "Enabled" #f)(setBeanProperty b "Config" #null) b))))
(let ((ctx (getContext ctx "core"))) (let ((ctx (getContext ctx "AppCrmCore"))) (homeCreateOrStore (.get ctx com.redknee.service.proxy.PluginInfoHome.class) (let ((b (com.redknee.service.proxy.PluginInfo.))) (setBeanProperty b "Name" "PromotionProvision")(setBeanProperty b "JarFile" "")(setBeanProperty b "ServiceInterface" "com.redknee.app.urcs.promotion.PromotionProvision")(setBeanProperty b "ClassName" "com.redknee.app.urcs.client.promotion.PromotionProvisionPlugin")(setBeanProperty b "Enabled" #f)(setBeanProperty b "Config" #null) b))))
(let ((ctx (getContext ctx "core"))) (let ((ctx (getContext ctx "AppCrmCore"))) (homeCreateOrStore (.get ctx com.redknee.service.proxy.PluginInfoHome.class) (let ((b (com.redknee.service.proxy.PluginInfo.))) (setBeanProperty b "Name" "SubscriberProfileProvisionV5")(setBeanProperty b "JarFile" "")(setBeanProperty b "ServiceInterface" "com.redknee.product.bundle.manager.provision.v5_0.profile.SubscriberProfileProvision")(setBeanProperty b "ClassName" "com.redknee.app.urcs.client.bmgt.SubscriberProfileV5Plugin")(setBeanProperty b "Enabled" #f)(setBeanProperty b "Config" #null) b))))
(let ((ctx (getContext ctx "core"))) (let ((ctx (getContext ctx "AppCrmCore"))) (homeCreateOrStore (.get ctx com.redknee.service.proxy.PluginInfoHome.class) (let ((b (com.redknee.service.proxy.PluginInfo.))) (setBeanProperty b "Name" "svc_provision9")(setBeanProperty b "JarFile" "")(setBeanProperty b "ServiceInterface" "com.redknee.app.smsb.dataserver.smsbcorba.svc_provision9")(setBeanProperty b "ClassName" "com.redknee.app.urcs.client.legacy.smsb.SvcProvision9Plugin")(setBeanProperty b "Enabled" #f)(setBeanProperty b "Config" #null) b))))
(let ((ctx (getContext ctx "core"))) (let ((ctx (getContext ctx "AppCrmCore"))) (homeCreateOrStore (.get ctx com.redknee.service.proxy.PluginInfoHome.class) (let ((b (com.redknee.service.proxy.PluginInfo.))) (setBeanProperty b "Name" "SubProvision")(setBeanProperty b "JarFile" "")(setBeanProperty b "ServiceInterface" "com.redknee.app.osa.ecp.provision.SubProvision")(setBeanProperty b "ClassName" "com.redknee.app.urcs.client.legacy.ecp.SubProvisionPlugin")(setBeanProperty b "Enabled" #f)(setBeanProperty b "Config" #null) b))))
(let ((ctx (getContext ctx "core"))) (let ((ctx (getContext ctx "AppCrmCore"))) (homeCreateOrStore (.get ctx com.redknee.service.proxy.PluginInfoHome.class) (let ((b (com.redknee.service.proxy.PluginInfo.))) (setBeanProperty b "Name" "SubscriberProvision")(setBeanProperty b "JarFile" "")(setBeanProperty b "ServiceInterface" "com.redknee.product.abm.SubscriberProvision")(setBeanProperty b "ClassName" "com.redknee.app.urcs.client.legacy.abm.SubscriberProvisionPlugin")(setBeanProperty b "Enabled" #f)(setBeanProperty b "Config" #null) b))))
(let ((ctx (getContext ctx "core"))) (let ((ctx (getContext ctx "AppCrmCore"))) (homeCreateOrStore (.get ctx com.redknee.service.proxy.PluginInfoHome.class) (let ((b (com.redknee.service.proxy.PluginInfo.))) (setBeanProperty b "Name" "SubscriberLangProv")(setBeanProperty b "JarFile" "")(setBeanProperty b "ServiceInterface" "com.redknee.app.pin.manager.SubscriberLangProv")(setBeanProperty b "ClassName" "com.redknee.app.pin.manager.client.SubscriberLangProvPlugin2")(setBeanProperty b "Enabled" #f)(setBeanProperty b "Config" #null) b))))
(let ((ctx (getContext ctx "core"))) (let ((ctx (getContext ctx "AppCrmCore"))) (homeCreateOrStore (.get ctx com.redknee.service.proxy.PluginInfoHome.class) (let ((b (com.redknee.service.proxy.PluginInfo.))) (setBeanProperty b "Name" "CategoryProvisionV5")(setBeanProperty b "JarFile" "")(setBeanProperty b "ServiceInterface" "com.redknee.product.bundle.manager.provision.v5_0.category.CategoryProvision")(setBeanProperty b "ClassName" "com.redknee.app.urcs.client.bmgt.CategoryProvisionV5Plugin")(setBeanProperty b "Enabled" #f)(setBeanProperty b "Config" #null) b))))
(let ((ctx (getContext ctx "core"))) (let ((ctx (getContext ctx "AppCrmCore"))) (homeCreateOrStore (.get ctx com.redknee.service.proxy.PluginInfoHome.class) (let ((b (com.redknee.service.proxy.PluginInfo.))) (setBeanProperty b "Name" "BundleProfileProvisionV5")(setBeanProperty b "JarFile" "")(setBeanProperty b "ServiceInterface" "com.redknee.product.bundle.manager.provision.v5_0.bundle.BundleProfileProvision")(setBeanProperty b "ClassName" "com.redknee.app.urcs.client.bmgt.BundleProfileProvisionV5Plugin")(setBeanProperty b "Enabled" #f)(setBeanProperty b "Config" #null) b))))
(let ((ctx (getContext ctx "core"))) (let ((ctx (getContext ctx "AppCrmCore"))) (homeCreateOrStore (.get ctx com.redknee.service.proxy.PluginInfoHome.class) (let ((b (com.redknee.service.proxy.PluginInfo.))) (setBeanProperty b "Name" "PrepaidAccountService")(setBeanProperty b "JarFile" "")(setBeanProperty b "ServiceInterface" "com.redknee.product.s2100.oasis.PrepaidAccountService")(setBeanProperty b "ClassName" "com.redknee.app.urcs.client.bmgt.PrepaidAccountServicePlugin")(setBeanProperty b "Enabled" #f)(setBeanProperty b "Config" #null) b))))
(let ((ctx (getContext ctx "core"))) (let ((ctx (getContext ctx "AppCrmCore"))) (homeCreateOrStore (.get ctx com.redknee.service.proxy.PluginInfoHome.class) (let ((b (com.redknee.service.proxy.PluginInfo.))) (setBeanProperty b "Name" "PromotionManagementV2")(setBeanProperty b "JarFile" "")(setBeanProperty b "ServiceInterface" "com.redknee.app.urcs.promotion.v2_0.PromotionManagement")(setBeanProperty b "ClassName" "com.redknee.app.urcs.client.promotion.v2_0.PromotionManagementPlugin")(setBeanProperty b "Enabled" #f)(setBeanProperty b "Config" #null) b))))
(let ((ctx (getContext ctx "core"))) (let ((ctx (getContext ctx "AppCrmCore"))) (homeCreateOrStore (.get ctx com.redknee.service.proxy.PluginInfoHome.class) (let ((b (com.redknee.service.proxy.PluginInfo.))) (setBeanProperty b "Name" "PinManagerService")(setBeanProperty b "JarFile" "")(setBeanProperty b "ServiceInterface" "com.redknee.app.pin.manager.PinManagerService")(setBeanProperty b "ClassName" "com.redknee.app.urcs.client.pinmgr.PinManagerPlugin")(setBeanProperty b "Enabled" #f)(setBeanProperty b "Config" #null) b))))
(let ((ctx (getContext ctx "core"))) (let ((ctx (getContext ctx "AppCrmCore"))) (homeCreateOrStore (.get ctx com.redknee.service.proxy.PluginInfoHome.class) (let ((b (com.redknee.service.proxy.PluginInfo.))) (setBeanProperty b "Name" "PricePlanMgmtV2")(setBeanProperty b "JarFile" "")(setBeanProperty b "ServiceInterface" "com.redknee.app.urcs.provision.v2_0.PricePlanMgmt")(setBeanProperty b "ClassName" "com.redknee.app.urcs.client.priceplan.v2_0.PricePlanMgmtPlugin")(setBeanProperty b "Enabled" #t) b))))
(let ((ctx (getContext ctx "core"))) (let ((ctx (getContext ctx "AppCrmCore"))) (homeCreateOrStore (.get ctx com.redknee.service.proxy.PluginInfoHome.class) (let ((b (com.redknee.service.proxy.PluginInfo.))) (setBeanProperty b "Name" "BusinessGroupPricePlanProvisioning")(setBeanProperty b "JarFile" "")(setBeanProperty b "ServiceInterface" "com.redknee.app.urcs.vpn.BusinessGroupPricePlanProvisioning")(setBeanProperty b "ClassName" "com.redknee.app.urcs.client.vpn.BusinessGroupPricePlanProvisioningPlugin")(setBeanProperty b "Enabled" #f)(setBeanProperty b "Config" #null) b))))
(let ((ctx (getContext ctx "core"))) (let ((ctx (getContext ctx "AppCrmCore"))) (homeCreateOrStore (.get ctx com.redknee.service.proxy.PluginInfoHome.class) (let ((b (com.redknee.service.proxy.PluginInfo.))) (setBeanProperty b "Name" "FFECareRmiService")(setBeanProperty b "JarFile" "")(setBeanProperty b "ServiceInterface" "com.redknee.app.ff.ecare.rmi.FFECareRmiService")(setBeanProperty b "ClassName" "com.redknee.service.proxy.rmi.RmiServicePlugin")(setBeanProperty b "Enabled" #f)(setBeanProperty b "Config" #null) b))))
(let ((ctx (getContext ctx "core"))) (let ((ctx (getContext ctx "AppCrmCore"))) (homeCreateOrStore (.get ctx com.redknee.service.proxy.PluginInfoHome.class) (let ((b (com.redknee.service.proxy.PluginInfo.))) (setBeanProperty b "Name" "VoucherRedemptionService")(setBeanProperty b "JarFile" "")(setBeanProperty b "ServiceInterface" "com.redknee.app.vra.interfaces.VoucherRedemptionService")(setBeanProperty b "ClassName" "com.redknee.service.proxy.rmi.RmiServicePlugin")(setBeanProperty b "Enabled" #f)(setBeanProperty b "Config" #null) b))))
(let ((ctx (getContext ctx "core"))) (let ((ctx (getContext ctx "AppCrmCore"))) (homeCreateOrStore (.get ctx com.redknee.service.proxy.PluginInfoHome.class) (let ((b (com.redknee.service.proxy.PluginInfo.))) (setBeanProperty b "Name" "RMIVoucherInfoRetrieveService")(setBeanProperty b "JarFile" "")(setBeanProperty b "ServiceInterface" "com.redknee.app.vra.interfaces.RMIVoucherInfoRetrieveService")(setBeanProperty b "ClassName" "com.redknee.service.proxy.rmi.RmiServicePlugin")(setBeanProperty b "Enabled" #f)(setBeanProperty b "Config" #null) b))))
(let ((ctx (getContext ctx "core"))) (let ((ctx (getContext ctx "AppCrmCore"))) (homeCreateOrStore (.get ctx com.redknee.service.proxy.PluginInfoHome.class) (let ((b (com.redknee.service.proxy.PluginInfo.))) (setBeanProperty b "Name" "RMIPricePlanVoucherTypeMappingService")(setBeanProperty b "JarFile" "")(setBeanProperty b "ServiceInterface" "com.redknee.app.vra.interfaces.RMIPricePlanVoucherTypeMappingService")(setBeanProperty b "ClassName" "com.redknee.service.proxy.rmi.RmiServicePlugin")(setBeanProperty b "Enabled" #f)(setBeanProperty b "Config" #null) b))))
(let ((ctx (getContext ctx "core"))) (let ((ctx (getContext ctx "AppCrmCore"))) (homeCreateOrStore (.get ctx com.redknee.service.proxy.PluginInfoHome.class) (let ((b (com.redknee.service.proxy.PluginInfo.))) (setBeanProperty b "Name" "ScreeningTemplates")(setBeanProperty b "JarFile" "")(setBeanProperty b "ServiceInterface" "com.redknee.app.urcs.ppsm.ScreeningTemplates")(setBeanProperty b "ClassName" "com.redknee.app.urcs.client.ppsm.ScreeningTemplatesServicePlugin")(setBeanProperty b "Enabled" #f)(setBeanProperty b "Config" #null) b))))
(let ((ctx (getContext ctx "core"))) (let ((ctx (getContext ctx "AppCrmCore"))) (homeCreateOrStore (.get ctx com.redknee.service.proxy.PluginInfoHome.class) (let ((b (com.redknee.service.proxy.PluginInfo.))) (setBeanProperty b "Name" "LoyaltyProfileProvision")(setBeanProperty b "JarFile" "")(setBeanProperty b "ServiceInterface" "com.redknee.product.bundle.manager.provision.v4_0.loyalty.LoyaltyProfileProvision")(setBeanProperty b "ClassName" "com.redknee.app.urcs.client.bmgt.LoyaltyProvisonPlugin")(setBeanProperty b "Enabled" #f)(setBeanProperty b "Config" #null) b))))
(let ((ctx (getContext ctx "core"))) (let ((ctx (getContext ctx "AppCrmCore"))) (homeCreateOrStore (.get ctx com.redknee.service.proxy.PluginInfoHome.class) (let ((b (com.redknee.service.proxy.PluginInfo.))) (setBeanProperty b "Name" "LoyaltyOperationsInterface")(setBeanProperty b "JarFile" "")(setBeanProperty b "ServiceInterface" "com.redknee.app.urcs.loyaltyoperation.LoyaltyOperationsInterface")(setBeanProperty b "ClassName" "com.redknee.app.urcs.client.bmgt.LoyaltyOperationPlugin")(setBeanProperty b "Enabled" #f)(setBeanProperty b "Config" #null) b))))
(let ((ctx (getContext ctx "core"))) (let ((ctx (getContext ctx "AppCrmCore"))) (homeCreateOrStore (.get ctx com.redknee.service.proxy.PluginInfoHome.class) (let ((b (com.redknee.service.proxy.PluginInfo.))) (setBeanProperty b "Name" "SubscriberProv")(setBeanProperty b "JarFile" "")(setBeanProperty b "ServiceInterface" "com.redknee.product.s5600.ipcg.provisioning.SubscriberProv")(setBeanProperty b "ClassName" "com.redknee.app.urcs.client.legacy.s5600.SubProvisionPlugin")(setBeanProperty b "Enabled" #f)(setBeanProperty b "Config" #null) b))))
(let ((ctx (getContext ctx "core"))) (let ((ctx (getContext ctx "AppCrmCore"))) (homeCreateOrStore (.get ctx com.redknee.service.proxy.PluginInfoHome.class) (let ((b (com.redknee.service.proxy.PluginInfo.))) (setBeanProperty b "Name" "CDMASubscriberProv")(setBeanProperty b "JarFile" "")(setBeanProperty b "ServiceInterface" "com.redknee.app.crm.client.ipcg.CDMASubscriberProv")(setBeanProperty b "ClassName" "com.redknee.app.urcs.client.legacy.s5600.SubProvisionPlugin")(setBeanProperty b "Enabled" #f)(setBeanProperty b "Config" #null) b))))
(let ((ctx (getContext ctx "core"))) (let ((ctx (getContext ctx "AppCrmCore"))) (homeCreateOrStore (.get ctx com.redknee.service.proxy.PluginInfoHome.class) (let ((b (com.redknee.service.proxy.PluginInfo.))) (setBeanProperty b "Name" "ScreeningTemplateProvision")(setBeanProperty b "JarFile" "")(setBeanProperty b "ServiceInterface" "com.redknee.product.bundle.manager.provision.v5_0.screeningTemplate.ScreeningTemplateProvision")(setBeanProperty b "ClassName" "com.redknee.app.urcs.client.bmgt.ScreeningTemplateProvisionV5Plugin")(setBeanProperty b "Enabled" #f)(setBeanProperty b "Config" #null) b))))
(let ((ctx (getContext ctx "core"))) (let ((ctx (getContext ctx "AppCrmCore"))) (homeCreateOrStore (.get ctx com.redknee.service.proxy.PluginInfoHome.class) (let ((b (com.redknee.service.proxy.PluginInfo.))) (setBeanProperty b "Name" "ScreeningTemplateProvisionV5")(setBeanProperty b "JarFile" "")(setBeanProperty b "ServiceInterface" "com.redknee.product.bundle.manager.provision.v5_0.screeningTemplate.ScreeningTemplateProvision")(setBeanProperty b "ClassName" "com.redknee.app.urcs.client.bmgt.ScreeningTemplateProvisionV5Plugin")(setBeanProperty b "Enabled" #f)(setBeanProperty b "Config" #null) b))))

(let ((ctx (getContext ctx "core"))) (let ((ctx (getContext ctx "AppCrmCore"))) (bindHome ctx com.redknee.service.proxy.ProxyInfoHome.class com.redknee.service.proxy.ProxyInfo.class)))
(let ((ctx (getContext ctx "core"))) (let ((ctx (getContext ctx "AppCrmCore"))) (homeCreateOrStore (.get ctx com.redknee.service.proxy.ProxyInfoHome.class) (let ((b (com.redknee.service.proxy.ProxyInfo.))) (setBeanProperty b "Name" "SubscriberBucketProvisionV5")(setBeanProperty b "Plugin" "SubscriberBucketProvisionV5")(setBeanProperty b "Enabled" #f)(setBeanProperty b "Config" (let ((b (com.redknee.service.proxy.share.MultiplexerConfiguration.))) (setBeanProperty b "Broadcast" #f)(setBeanProperty b "Multiplexer" #null)(setBeanProperty b "Connections" (let ((c (java.util.ArrayList.))) (.add c (let ((b (com.redknee.service.proxy.share.LoadSharingNode.)))(setBeanProperty b "ConnectionId" "RKURCS")(setBeanProperty b "Hostname" "RKURCSPRI,RKURCSSEC")(setBeanProperty b "Port" 20000)(setBeanProperty b "ServiceName" "redknee/product/bundle/manager/v5_0/BucketProvisionFactory") b)) c))(setBeanProperty b "Merger" (let ((b (com.redknee.service.proxy.client.LastResultMerger.)))  b))(setBeanProperty b "Config" (let ((b (com.redknee.service.corba.CorbaClientProperty.))) (setBeanProperty b "Username" "appcrm")(setBeanProperty b "Password" "appcrm")(setBeanProperty b "NameServiceHost" "RKURCSPRI")(setBeanProperty b "NameServiceContextName" "redknee/product/bundle/manager/v5_0/BucketProvisionFactory") b)) b))(setBeanProperty b "Validator" (let ((b (com.redknee.service.proxy.client.SameInterfaceRequestValidator.)))  b))(setBeanProperty b "Merger" (let ((b (com.redknee.service.proxy.client.LastResultMerger.)))  b))(setBeanProperty b "Converter" #null) b))))
(let ((ctx (getContext ctx "core"))) (let ((ctx (getContext ctx "AppCrmCore"))) (homeCreateOrStore (.get ctx com.redknee.service.proxy.ProxyInfoHome.class) (let ((b (com.redknee.service.proxy.ProxyInfo.))) (setBeanProperty b "Name" "PromotionProvision")(setBeanProperty b "Plugin" "PromotionProvision")(setBeanProperty b "Enabled" #f)(setBeanProperty b "Config" (let ((b (com.redknee.service.proxy.share.MultiplexerConfiguration.))) (setBeanProperty b "Broadcast" #f)(setBeanProperty b "Multiplexer" #null)(setBeanProperty b "Connections" (let ((c (java.util.ArrayList.))) (.add c (let ((b (com.redknee.service.proxy.share.LoadSharingNode.)))(setBeanProperty b "ConnectionId" "RKURCS")(setBeanProperty b "Hostname" "RKURCSPRI,RKURCSSEC")(setBeanProperty b "Port" 20000)(setBeanProperty b "ServiceName" "redknee/app/urcs/PromotionProvision") b)) c))(setBeanProperty b "Merger" (let ((b (com.redknee.service.proxy.client.LastResultMerger.)))  b))(setBeanProperty b "Config" (let ((b (com.redknee.service.corba.CorbaClientProperty.))) (setBeanProperty b "Username" "appcrm")(setBeanProperty b "Password" "appcrm")(setBeanProperty b "NameServiceHost" "RKURCSPRI")(setBeanProperty b "NameServiceContextName" "redknee/app/urcs/PromotionProvision") b)) b))(setBeanProperty b "Validator" (let ((b (com.redknee.service.proxy.client.SameInterfaceRequestValidator.)))  b))(setBeanProperty b "Merger" (let ((b (com.redknee.service.proxy.client.LastResultMerger.)))  b))(setBeanProperty b "Converter" #null) b))))
(let ((ctx (getContext ctx "core"))) (let ((ctx (getContext ctx "AppCrmCore"))) (homeCreateOrStore (.get ctx com.redknee.service.proxy.ProxyInfoHome.class) (let ((b (com.redknee.service.proxy.ProxyInfo.))) (setBeanProperty b "Name" "SubscriberProfileProvisionV5")(setBeanProperty b "Plugin" "SubscriberProfileProvisionV5")(setBeanProperty b "Enabled" #f)(setBeanProperty b "Config" (let ((b (com.redknee.service.proxy.share.MultiplexerConfiguration.))) (setBeanProperty b "Broadcast" #f)(setBeanProperty b "Multiplexer" #null)(setBeanProperty b "Connections" (let ((c (java.util.ArrayList.))) (.add c (let ((b (com.redknee.service.proxy.share.LoadSharingNode.)))(setBeanProperty b "ConnectionId" "RKURCS")(setBeanProperty b "Hostname" "RKURCSPRI,RKURCSSEC")(setBeanProperty b "Port" 20000)(setBeanProperty b "ServiceName" "redknee/product/bundle/manager/v5_0/SubscriberSubscriptionProvision") b)) c))(setBeanProperty b "Merger" (let ((b (com.redknee.service.proxy.client.LastResultMerger.)))  b))(setBeanProperty b "Config" (let ((b (com.redknee.service.corba.CorbaClientProperty.))) (setBeanProperty b "Username" "appcrm")(setBeanProperty b "Password" "appcrm")(setBeanProperty b "NameServiceHost" "RKURCSPRI")(setBeanProperty b "NameServiceContextName" "redknee/product/bundle/manager/v5_0/SubscriberSubscriptionProvision") b)) b))(setBeanProperty b "Validator" (let ((b (com.redknee.service.proxy.client.SameInterfaceRequestValidator.)))  b))(setBeanProperty b "Merger" (let ((b (com.redknee.service.proxy.client.LastResultMerger.)))  b))(setBeanProperty b "Converter" #null) b))))
(let ((ctx (getContext ctx "core"))) (let ((ctx (getContext ctx "AppCrmCore"))) (homeCreateOrStore (.get ctx com.redknee.service.proxy.ProxyInfoHome.class) (let ((b (com.redknee.service.proxy.ProxyInfo.))) (setBeanProperty b "Name" "svc_provision9")(setBeanProperty b "Plugin" "svc_provision9")(setBeanProperty b "Enabled" #f)(setBeanProperty b "Config" (let ((b (com.redknee.service.proxy.share.MultiplexerConfiguration.))) (setBeanProperty b "Broadcast" #f)(setBeanProperty b "Multiplexer" #null)(setBeanProperty b "Connections" (let ((c (java.util.ArrayList.))) (.add c (let ((b (com.redknee.service.proxy.share.LoadSharingNode.)))(setBeanProperty b "ConnectionId" "RKURCS")(setBeanProperty b "Hostname" "RKURCSPRI,RKURCSSEC")(setBeanProperty b "Port" 20000)(setBeanProperty b "ServiceName" "Redknee/AppSmsb/DataServer/svcFactory2") b)) c))(setBeanProperty b "Merger" (let ((b (com.redknee.service.proxy.client.LastResultMerger.)))  b))(setBeanProperty b "Config" (let ((b (com.redknee.service.corba.CorbaClientProperty.))) (setBeanProperty b "Username" "appcrm")(setBeanProperty b "Password" "appcrm")(setBeanProperty b "NameServiceHost" "RKURCSPRI") b)) b))(setBeanProperty b "Validator" (let ((b (com.redknee.service.proxy.client.SameInterfaceRequestValidator.)))  b))(setBeanProperty b "Merger" (let ((b (com.redknee.service.proxy.client.LastResultMerger.)))  b))(setBeanProperty b "Converter" #null) b))))
(let ((ctx (getContext ctx "core"))) (let ((ctx (getContext ctx "AppCrmCore"))) (homeCreateOrStore (.get ctx com.redknee.service.proxy.ProxyInfoHome.class) (let ((b (com.redknee.service.proxy.ProxyInfo.))) (setBeanProperty b "Name" "SubProvision")(setBeanProperty b "Plugin" "SubProvision")(setBeanProperty b "Enabled" #f)(setBeanProperty b "Config" (let ((b (com.redknee.service.proxy.share.MultiplexerConfiguration.))) (setBeanProperty b "Broadcast" #f)(setBeanProperty b "Multiplexer" #null)(setBeanProperty b "Connections" (let ((c (java.util.ArrayList.))) (.add c (let ((b (com.redknee.service.proxy.share.LoadSharingNode.)))(setBeanProperty b "ConnectionId" "RKURCS")(setBeanProperty b "Hostname" "RKURCSPRI,RKURCSSEC")(setBeanProperty b "Port" 20000)(setBeanProperty b "ServiceName" "redknee/app/osa/ecp/SubProvisionFactory") b)) c))(setBeanProperty b "Merger" (let ((b (com.redknee.service.proxy.client.LastResultMerger.)))  b))(setBeanProperty b "Config" (let ((b (com.redknee.service.corba.CorbaClientProperty.))) (setBeanProperty b "Username" "appcrm")(setBeanProperty b "Password" "appcrm")(setBeanProperty b "NameServiceHost" "RKURCSPRI") b)) b))(setBeanProperty b "Validator" (let ((b (com.redknee.service.proxy.client.SameInterfaceRequestValidator.)))  b))(setBeanProperty b "Merger" (let ((b (com.redknee.service.proxy.client.LastResultMerger.)))  b))(setBeanProperty b "Converter" #null) b))))
(let ((ctx (getContext ctx "core"))) (let ((ctx (getContext ctx "AppCrmCore"))) (homeCreateOrStore (.get ctx com.redknee.service.proxy.ProxyInfoHome.class) (let ((b (com.redknee.service.proxy.ProxyInfo.))) (setBeanProperty b "Name" "SubscriberProvision")(setBeanProperty b "Plugin" "SubscriberProvision")(setBeanProperty b "Enabled" #f)(setBeanProperty b "Config" (let ((b (com.redknee.service.proxy.share.MultiplexerConfiguration.))) (setBeanProperty b "Broadcast" #f)(setBeanProperty b "Multiplexer" #null)(setBeanProperty b "Connections" (let ((c (java.util.ArrayList.))) (.add c (let ((b (com.redknee.service.proxy.share.LoadSharingNode.)))(setBeanProperty b "ConnectionId" "RKURCS")(setBeanProperty b "Hostname" "RKURCSPRI,RKURCSSEC")(setBeanProperty b "Port" 20000)(setBeanProperty b "ServiceName" "redknee/product/abm/Provision") b)) c))(setBeanProperty b "Merger" (let ((b (com.redknee.service.proxy.client.LastResultMerger.)))  b))(setBeanProperty b "Config" (let ((b (com.redknee.service.corba.CorbaClientProperty.))) (setBeanProperty b "Username" "appcrm")(setBeanProperty b "Password" "appcrm")(setBeanProperty b "NameServiceHost" "RKURCSPRI")(setBeanProperty b "NameServiceContextName" "redknee/product/abm/Provision") b)) b))(setBeanProperty b "Validator" (let ((b (com.redknee.service.proxy.client.SameInterfaceRequestValidator.)))  b))(setBeanProperty b "Merger" (let ((b (com.redknee.service.proxy.client.LastResultMerger.)))  b))(setBeanProperty b "Converter" #null) b))))
(let ((ctx (getContext ctx "core"))) (let ((ctx (getContext ctx "AppCrmCore"))) (homeCreateOrStore (.get ctx com.redknee.service.proxy.ProxyInfoHome.class) (let ((b (com.redknee.service.proxy.ProxyInfo.))) (setBeanProperty b "Name" "SubscriberLangProv")(setBeanProperty b "Plugin" "SubscriberLangProv")(setBeanProperty b "Enabled" #f)(setBeanProperty b "Config" (let ((b (com.redknee.service.proxy.share.MultiplexerConfiguration.))) (setBeanProperty b "Broadcast" #f)(setBeanProperty b "Multiplexer" #null)(setBeanProperty b "Connections" (let ((c (java.util.ArrayList.))) (.add c (let ((b (com.redknee.service.proxy.share.LoadSharingNode.)))(setBeanProperty b "ConnectionId" "RKURCS")(setBeanProperty b "Hostname" "RKURCSPRI,RKURCSSEC")(setBeanProperty b "Port" 20000)(setBeanProperty b "ServiceName" "redknee/app/pin/manager/SubscriberLangProvFactory") b)) c))(setBeanProperty b "Merger" (let ((b (com.redknee.service.proxy.client.LastResultMerger.)))  b))(setBeanProperty b "Config" (let ((b (com.redknee.service.corba.CorbaClientProperty.))) (setBeanProperty b "Username" "appcrm")(setBeanProperty b "Password" "appcrm")(setBeanProperty b "NameServiceHost" "RKURCSPRI")(setBeanProperty b "NameServiceContextName" "redknee/app/pin/manager/SubscriberLangProvFactory") b)) b))(setBeanProperty b "Validator" (let ((b (com.redknee.service.proxy.client.SameInterfaceRequestValidator.)))  b))(setBeanProperty b "Merger" (let ((b (com.redknee.service.proxy.client.LastResultMerger.)))  b))(setBeanProperty b "Converter" #null) b))))
(let ((ctx (getContext ctx "core"))) (let ((ctx (getContext ctx "AppCrmCore"))) (homeCreateOrStore (.get ctx com.redknee.service.proxy.ProxyInfoHome.class) (let ((b (com.redknee.service.proxy.ProxyInfo.))) (setBeanProperty b "Name" "CategoryProvisionV5")(setBeanProperty b "Plugin" "CategoryProvisionV5")(setBeanProperty b "Enabled" #f)(setBeanProperty b "Config" (let ((b (com.redknee.service.proxy.share.MultiplexerConfiguration.))) (setBeanProperty b "Broadcast" #f)(setBeanProperty b "Multiplexer" #null)(setBeanProperty b "Connections" (let ((c (java.util.ArrayList.))) (.add c (let ((b (com.redknee.service.proxy.share.LoadSharingNode.)))(setBeanProperty b "ConnectionId" "RKURCS")(setBeanProperty b "Hostname" "RKURCSPRI,RKURCSSEC")(setBeanProperty b "Port" 20000)(setBeanProperty b "ServiceName" "redknee/product/bundle/manager/v5_0/CategoryProvision") b)) c))(setBeanProperty b "Merger" (let ((b (com.redknee.service.proxy.client.LastResultMerger.)))  b))(setBeanProperty b "Config" (let ((b (com.redknee.service.corba.CorbaClientProperty.))) (setBeanProperty b "Username" "appcrm")(setBeanProperty b "Password" "appcrm")(setBeanProperty b "NameServiceHost" "RKURCSPRI")(setBeanProperty b "NameServiceContextName" "redknee/product/bundle/manager/v5_0/CategoryProvision") b)) b))(setBeanProperty b "Validator" (let ((b (com.redknee.service.proxy.client.SameInterfaceRequestValidator.)))  b))(setBeanProperty b "Merger" (let ((b (com.redknee.service.proxy.client.LastResultMerger.)))  b))(setBeanProperty b "Converter" #null) b))))
(let ((ctx (getContext ctx "core"))) (let ((ctx (getContext ctx "AppCrmCore"))) (homeCreateOrStore (.get ctx com.redknee.service.proxy.ProxyInfoHome.class) (let ((b (com.redknee.service.proxy.ProxyInfo.))) (setBeanProperty b "Name" "BundleProfileProvisionV5")(setBeanProperty b "Plugin" "BundleProfileProvisionV5")(setBeanProperty b "Enabled" #f)(setBeanProperty b "Config" (let ((b (com.redknee.service.proxy.share.MultiplexerConfiguration.))) (setBeanProperty b "Broadcast" #f)(setBeanProperty b "Multiplexer" #null)(setBeanProperty b "Connections" (let ((c (java.util.ArrayList.))) (.add c (let ((b (com.redknee.service.proxy.share.LoadSharingNode.)))(setBeanProperty b "ConnectionId" "RKURCS")(setBeanProperty b "Hostname" "RKURCSPRI,RKURCSSEC")(setBeanProperty b "Port" 20000)(setBeanProperty b "ServiceName" "redknee/product/bundle/manager/v5_0/BundleProvision") b)) c))(setBeanProperty b "Merger" (let ((b (com.redknee.service.proxy.client.LastResultMerger.)))  b))(setBeanProperty b "Config" (let ((b (com.redknee.service.corba.CorbaClientProperty.))) (setBeanProperty b "Username" "appcrm")(setBeanProperty b "Password" "appcrm")(setBeanProperty b "NameServiceHost" "RKURCSPRI")(setBeanProperty b "NameServiceContextName" "redknee/product/bundle/manager/v5_0/BundleProvision") b)) b))(setBeanProperty b "Validator" (let ((b (com.redknee.service.proxy.client.SameInterfaceRequestValidator.)))  b))(setBeanProperty b "Merger" (let ((b (com.redknee.service.proxy.client.LastResultMerger.)))  b))(setBeanProperty b "Converter" #null) b))))
(let ((ctx (getContext ctx "core"))) (let ((ctx (getContext ctx "AppCrmCore"))) (homeCreateOrStore (.get ctx com.redknee.service.proxy.ProxyInfoHome.class) (let ((b (com.redknee.service.proxy.ProxyInfo.))) (setBeanProperty b "Name" "PrepaidAccountService")(setBeanProperty b "Plugin" "PrepaidAccountService")(setBeanProperty b "Enabled" #f)(setBeanProperty b "Config" (let ((b (com.redknee.service.proxy.share.MultiplexerConfiguration.))) (setBeanProperty b "Broadcast" #f)(setBeanProperty b "Multiplexer" #null)(setBeanProperty b "Connections" (let ((c (java.util.ArrayList.))) (.add c (let ((b (com.redknee.service.proxy.share.LoadSharingNode.)))(setBeanProperty b "ConnectionId" "RKURCS")(setBeanProperty b "Hostname" "RKURCSPRI,RKURCSSEC")(setBeanProperty b "Port" 20000)(setBeanProperty b "ServiceName" "redknee/product/s2100/oasis/UserAuth") b)) c))(setBeanProperty b "Merger" (let ((b (com.redknee.service.proxy.client.LastResultMerger.)))  b))(setBeanProperty b "Config" (let ((b (com.redknee.service.corba.CorbaClientProperty.))) (setBeanProperty b "Username" "appcrm")(setBeanProperty b "Password" "appcrm")(setBeanProperty b "NameServiceHost" "RKURCSPRI")(setBeanProperty b "NameServiceContextName" "redknee/app/urcs/oasis/UserAuth") b)) b))(setBeanProperty b "Validator" (let ((b (com.redknee.service.proxy.client.SameInterfaceRequestValidator.)))  b))(setBeanProperty b "Merger" (let ((b (com.redknee.service.proxy.client.LastResultMerger.)))  b))(setBeanProperty b "Converter" #null) b))))
(let ((ctx (getContext ctx "core"))) (let ((ctx (getContext ctx "AppCrmCore"))) (homeCreateOrStore (.get ctx com.redknee.service.proxy.ProxyInfoHome.class) (let ((b (com.redknee.service.proxy.ProxyInfo.))) (setBeanProperty b "Name" "PromotionManagementV2")(setBeanProperty b "Plugin" "PromotionManagementV2")(setBeanProperty b "Enabled" #f)(setBeanProperty b "Config" (let ((b (com.redknee.service.proxy.share.MultiplexerConfiguration.))) (setBeanProperty b "Broadcast" #f)(setBeanProperty b "Multiplexer" #null)(setBeanProperty b "Connections" (let ((c (java.util.ArrayList.))) (.add c (let ((b (com.redknee.service.proxy.share.LoadSharingNode.)))(setBeanProperty b "ConnectionId" "RKURCS")(setBeanProperty b "Hostname" "RKURCSPRI,RKURCSSEC")(setBeanProperty b "Port" 20000)(setBeanProperty b "ServiceName" "redknee/app/urcs/PromotionManagement2") b)) c))(setBeanProperty b "Merger" (let ((b (com.redknee.service.proxy.client.LastResultMerger.)))  b))(setBeanProperty b "Config" (let ((b (com.redknee.service.corba.CorbaClientProperty.))) (setBeanProperty b "Username" "appcrm")(setBeanProperty b "Password" "appcrm")(setBeanProperty b "NameServiceHost" "RKURCSPRI")(setBeanProperty b "NameServiceContextName" "redknee/app/urcs/PromotionManagement2") b)) b))(setBeanProperty b "Validator" (let ((b (com.redknee.service.proxy.client.SameInterfaceRequestValidator.)))  b))(setBeanProperty b "Merger" (let ((b (com.redknee.service.proxy.client.LastResultMerger.)))  b))(setBeanProperty b "Converter" #null) b))))
(let ((ctx (getContext ctx "core"))) (let ((ctx (getContext ctx "AppCrmCore"))) (homeCreateOrStore (.get ctx com.redknee.service.proxy.ProxyInfoHome.class) (let ((b (com.redknee.service.proxy.ProxyInfo.))) (setBeanProperty b "Name" "PinManagerService")(setBeanProperty b "Plugin" "PinManagerService")(setBeanProperty b "Enabled" #f)(setBeanProperty b "Config" (let ((b (com.redknee.service.proxy.share.MultiplexerConfiguration.))) (setBeanProperty b "Broadcast" #f)(setBeanProperty b "Multiplexer" #null)(setBeanProperty b "Connections" (let ((c (java.util.ArrayList.))) (.add c (let ((b (com.redknee.service.proxy.share.LoadSharingNode.)))(setBeanProperty b "ConnectionId" "RKURCS")(setBeanProperty b "Hostname" "RKURCSPRI,RKURCSSEC")(setBeanProperty b "Port" 20000)(setBeanProperty b "ServiceName" "redknee/app/pin/manager/UserAuth") b)) c))(setBeanProperty b "Merger" (let ((b (com.redknee.service.proxy.client.LastResultMerger.)))  b))(setBeanProperty b "Config" (let ((b (com.redknee.service.corba.CorbaClientProperty.))) (setBeanProperty b "Username" "appcrm")(setBeanProperty b "Password" "appcrm")(setBeanProperty b "NameServiceHost" "RKURCSPRI")(setBeanProperty b "NameServiceContextName" "redknee/app/pin/manager/UserAuth") b)) b))(setBeanProperty b "Validator" (let ((b (com.redknee.service.proxy.client.SameInterfaceRequestValidator.)))  b))(setBeanProperty b "Merger" (let ((b (com.redknee.service.proxy.client.LastResultMerger.)))  b))(setBeanProperty b "Converter" #null) b))))
(let ((ctx (getContext ctx "core"))) (let ((ctx (getContext ctx "AppCrmCore"))) (homeCreateOrStore (.get ctx com.redknee.service.proxy.ProxyInfoHome.class) (let ((b (com.redknee.service.proxy.ProxyInfo.))) (setBeanProperty b "Name" "BusinessGroupPricePlanProvisioning")(setBeanProperty b "Plugin" "BusinessGroupPricePlanProvisioning")(setBeanProperty b "Enabled" #f)(setBeanProperty b "Config" (let ((b (com.redknee.service.proxy.share.MultiplexerConfiguration.))) (setBeanProperty b "Broadcast" #f)(setBeanProperty b "Multiplexer" #null)(setBeanProperty b "Connections" (let ((c (java.util.ArrayList.))) (.add c (let ((b (com.redknee.service.proxy.share.LoadSharingNode.)))(setBeanProperty b "ConnectionId" "RKURCS")(setBeanProperty b "Hostname" "RKURCSPRI,RKURCSSEC")(setBeanProperty b "Port" 20000)(setBeanProperty b "ServiceName" "redknee/app/urcs/VpnPriceplanMapping") b)) c))(setBeanProperty b "Merger" (let ((b (com.redknee.service.proxy.client.LastResultMerger.)))  b))(setBeanProperty b "Config" (let ((b (com.redknee.service.corba.CorbaClientProperty.))) (setBeanProperty b "Username" "appcrm")(setBeanProperty b "Password" "appcrm")(setBeanProperty b "NameServiceHost" "RKURCSPRI")(setBeanProperty b "NameServiceContextName" "redknee/app/urcs/VpnPriceplanMapping") b)) b))(setBeanProperty b "Validator" (let ((b (com.redknee.service.proxy.client.SameInterfaceRequestValidator.)))  b))(setBeanProperty b "Merger" (let ((b (com.redknee.service.proxy.client.LastResultMerger.)))  b))(setBeanProperty b "Converter" #null) b))))
(let ((ctx (getContext ctx "core"))) (let ((ctx (getContext ctx "AppCrmCore"))) (homeCreateOrStore (.get ctx com.redknee.service.proxy.ProxyInfoHome.class) (let ((b (com.redknee.service.proxy.ProxyInfo.))) (setBeanProperty b "Name" "PricePlanMgmtV2")(setBeanProperty b "Plugin" "PricePlanMgmtV2")(setBeanProperty b "Enabled" #t)(setBeanProperty b "Config" (let ((b (com.redknee.service.proxy.share.MultiplexerConfiguration.))) (setBeanProperty b "Multiplexer" (let ((b (com.redknee.app.urcs.client.priceplan.PricePlanMultiplexer.)))  b))(setBeanProperty b "Connections" (let ((c (java.util.ArrayList.))) (.add c (let ((b (com.redknee.service.proxy.share.LoadSharingNode.)))(setBeanProperty b "ConnectionId" "VOICE")(setBeanProperty b "Hostname" "RKURCSPRI,RKURCSSEC")(setBeanProperty b "Port" 20000)(setBeanProperty b "ServiceName" "redknee/app/urcs/PricePlanMgmt2") b))(.add c (let ((b (com.redknee.service.proxy.share.LoadSharingNode.)))(setBeanProperty b "ConnectionId" "SMS")(setBeanProperty b "Hostname" "RKURCSPRI,RKURCSSEC")(setBeanProperty b "Port" 20000)(setBeanProperty b "ServiceName" "redknee/app/urcs/PricePlanMgmt2") b))(.add c (let ((b (com.redknee.service.proxy.share.LoadSharingNode.)))(setBeanProperty b "ConnectionId" "DATA")(setBeanProperty b "Hostname" "RKURCSPRI,RKURCSSEC")(setBeanProperty b "Port" 20000)(setBeanProperty b "ServiceName" "redknee/app/urcs/PricePlanMgmt2") b)) c))(setBeanProperty b "Config" (let ((b (com.redknee.service.corba.CorbaClientProperty.))) (setBeanProperty b "Username" "appcrm")(setBeanProperty b "Password" "appcrm")(setBeanProperty b "NameServiceHost" "RKURCSPRI")(setBeanProperty b "NameServiceContextName" "redknee/app/urcs/PricePlanMgmt2") b)) b))(setBeanProperty b "Validator" (let ((b (com.redknee.service.proxy.client.SameInterfaceRequestValidator.))) (setBeanProperty b "Expression" "") b)) b))))
(let ((ctx (getContext ctx "core"))) (let ((ctx (getContext ctx "AppCrmCore"))) (homeCreateOrStore (.get ctx com.redknee.service.proxy.ProxyInfoHome.class) (let ((b (com.redknee.service.proxy.ProxyInfo.))) (setBeanProperty b "Name" "BusinessGroupPricePlanProvisioning")(setBeanProperty b "Plugin" "BusinessGroupPricePlanProvisioning")(setBeanProperty b "Enabled" #f)(setBeanProperty b "Config" (let ((b (com.redknee.service.proxy.share.MultiplexerConfiguration.))) (setBeanProperty b "Broadcast" #f)(setBeanProperty b "Multiplexer" #null)(setBeanProperty b "Connections" (let ((c (java.util.ArrayList.))) (.add c (let ((b (com.redknee.service.proxy.share.LoadSharingNode.)))(setBeanProperty b "ConnectionId" "RKURCS")(setBeanProperty b "Hostname" "RKURCSPRI,RKURCSSEC")(setBeanProperty b "Port" 20000)(setBeanProperty b "ServiceName" "redknee/app/urcs/VpnPriceplanMapping") b)) c))(setBeanProperty b "Merger" (let ((b (com.redknee.service.proxy.client.LastResultMerger.)))  b))(setBeanProperty b "Config" (let ((b (com.redknee.service.corba.CorbaClientProperty.))) (setBeanProperty b "Username" "appcrm")(setBeanProperty b "Password" "appcrm")(setBeanProperty b "NameServiceHost" "RKURCSPRI")(setBeanProperty b "NameServiceContextName" "redknee/app/urcs/VpnPriceplanMapping") b)) b))(setBeanProperty b "Validator" (let ((b (com.redknee.service.proxy.client.SameInterfaceRequestValidator.)))  b))(setBeanProperty b "Merger" (let ((b (com.redknee.service.proxy.client.LastResultMerger.)))  b))(setBeanProperty b "Converter" #null) b))))
(let ((ctx (getContext ctx "core"))) (let ((ctx (getContext ctx "AppCrmCore"))) (homeCreateOrStore (.get ctx com.redknee.service.proxy.ProxyInfoHome.class) (let ((b (com.redknee.service.proxy.ProxyInfo.))) (setBeanProperty b "Name" "FFECareRmiService")(setBeanProperty b "Plugin" "FFECareRmiService")(setBeanProperty b "Enabled" #f)(setBeanProperty b "Config" (let ((b (com.redknee.service.proxy.share.MultiplexerConfiguration.))) (setBeanProperty b "Broadcast" #f)(setBeanProperty b "Multiplexer" #null)(setBeanProperty b "Connections" (let ((c (java.util.ArrayList.))) (.add c (let ((b (com.redknee.service.proxy.share.LoadSharingNode.)))(setBeanProperty b "ConnectionId" "RKURCS")(setBeanProperty b "Hostname" "RKURCSPRI,RKURCSSEC")(setBeanProperty b "Port" 11964)(setBeanProperty b "ServiceName" "FFECareRmiService&interval=60000") b)) c))(setBeanProperty b "Merger" (let ((b (com.redknee.service.proxy.client.LastResultMerger.)))  b))(setBeanProperty b "Config" #null) b))(setBeanProperty b "Validator" (let ((b (com.redknee.service.proxy.client.SameInterfaceRequestValidator.))) (setBeanProperty b "Expression" "") b))(setBeanProperty b "Merger" (let ((b (com.redknee.service.proxy.client.LastResultMerger.)))  b))(setBeanProperty b "Converter" #null) b))))
(let ((ctx (getContext ctx "core"))) (let ((ctx (getContext ctx "AppCrmCore"))) (homeCreateOrStore (.get ctx com.redknee.service.proxy.ProxyInfoHome.class) (let ((b (com.redknee.service.proxy.ProxyInfo.))) (setBeanProperty b "Name" "VoucherRedemptionService")(setBeanProperty b "Plugin" "VoucherRedemptionService")(setBeanProperty b "Enabled" #f)(setBeanProperty b "Config" (let ((b (com.redknee.service.proxy.share.MultiplexerConfiguration.))) (setBeanProperty b "Broadcast" #f)(setBeanProperty b "Multiplexer" #null)(setBeanProperty b "Connections" (let ((c (java.util.ArrayList.))) (.add c (let ((b (com.redknee.service.proxy.share.LoadSharingNode.)))(setBeanProperty b "ConnectionId" "RKVMS1")(setBeanProperty b "Hostname" "RKVMS1")(setBeanProperty b "Port" 10484)(setBeanProperty b "ServiceName" "VRA&interval=60000") b)) c))(setBeanProperty b "Merger" (let ((b (com.redknee.service.proxy.client.LastResultMerger.)))  b))(setBeanProperty b "Config" #null) b))(setBeanProperty b "Validator" (let ((b (com.redknee.service.proxy.client.SameInterfaceRequestValidator.))) (setBeanProperty b "Expression" "") b))(setBeanProperty b "Merger" (let ((b (com.redknee.service.proxy.client.LastResultMerger.)))  b))(setBeanProperty b "Converter" #null) b))))
(let ((ctx (getContext ctx "core"))) (let ((ctx (getContext ctx "AppCrmCore"))) (homeCreateOrStore (.get ctx com.redknee.service.proxy.ProxyInfoHome.class) (let ((b (com.redknee.service.proxy.ProxyInfo.))) (setBeanProperty b "Name" "RMIVoucherInfoRetrieveService")(setBeanProperty b "Plugin" "RMIVoucherInfoRetrieveService")(setBeanProperty b "Enabled" #f)(setBeanProperty b "Config" (let ((b (com.redknee.service.proxy.share.MultiplexerConfiguration.))) (setBeanProperty b "Broadcast" #f)(setBeanProperty b "Multiplexer" #null)(setBeanProperty b "Connections" (let ((c (java.util.ArrayList.))) (.add c (let ((b (com.redknee.service.proxy.share.LoadSharingNode.)))(setBeanProperty b "ConnectionId" "RKVMS1")(setBeanProperty b "Hostname" "RKVMS1")(setBeanProperty b "Port" 10484)(setBeanProperty b "ServiceName" "VOUCHER_INFO_RETRIEVE_SERVICE&interval=60000") b)) c))(setBeanProperty b "Merger" (let ((b (com.redknee.service.proxy.client.LastResultMerger.)))  b))(setBeanProperty b "Config" #null) b))(setBeanProperty b "Validator" (let ((b (com.redknee.service.proxy.client.SameInterfaceRequestValidator.))) (setBeanProperty b "Expression" "") b))(setBeanProperty b "Merger" (let ((b (com.redknee.service.proxy.client.LastResultMerger.)))  b))(setBeanProperty b "Converter" #null) b))))
(let ((ctx (getContext ctx "core"))) (let ((ctx (getContext ctx "AppCrmCore"))) (homeCreateOrStore (.get ctx com.redknee.service.proxy.ProxyInfoHome.class) (let ((b (com.redknee.service.proxy.ProxyInfo.))) (setBeanProperty b "Name" "RMIPricePlanVoucherTypeMappingService")(setBeanProperty b "Plugin" "RMIPricePlanVoucherTypeMappingService")(setBeanProperty b "Enabled" #f)(setBeanProperty b "Config" (let ((b (com.redknee.service.proxy.share.MultiplexerConfiguration.))) (setBeanProperty b "Broadcast" #f)(setBeanProperty b "Multiplexer" #null)(setBeanProperty b "Connections" (let ((c (java.util.ArrayList.))) (.add c (let ((b (com.redknee.service.proxy.share.LoadSharingNode.)))(setBeanProperty b "ConnectionId" "RKVMS1")(setBeanProperty b "Hostname" "RKVMS1")(setBeanProperty b "Port" 10484)(setBeanProperty b "ServiceName" "PRICE_PLAN_VOUCHER_TYPE_MAPPING_SERVICE&interval=60000") b)) c))(setBeanProperty b "Merger" (let ((b (com.redknee.service.proxy.client.LastResultMerger.)))  b))(setBeanProperty b "Config" #null) b))(setBeanProperty b "Validator" (let ((b (com.redknee.service.proxy.client.SameInterfaceRequestValidator.))) (setBeanProperty b "Expression" "") b))(setBeanProperty b "Merger" (let ((b (com.redknee.service.proxy.client.LastResultMerger.)))  b))(setBeanProperty b "Converter" #null) b))))
(let ((ctx (getContext ctx "core"))) (let ((ctx (getContext ctx "AppCrmCore"))) (homeCreateOrStore (.get ctx com.redknee.service.proxy.ProxyInfoHome.class) (let ((b (com.redknee.service.proxy.ProxyInfo.))) (setBeanProperty b "Name" "ScreeningTemplates")(setBeanProperty b "Plugin" "ScreeningTemplates")(setBeanProperty b "Enabled" #f)(setBeanProperty b "Config" (let ((b (com.redknee.service.proxy.share.MultiplexerConfiguration.))) (setBeanProperty b "Broadcast" #f)(setBeanProperty b "Multiplexer" #null)(setBeanProperty b "Connections" (let ((c (java.util.ArrayList.))) (.add c (let ((b (com.redknee.service.proxy.share.LoadSharingNode.)))(setBeanProperty b "ConnectionId" "RKURCS")(setBeanProperty b "Hostname" "RKURCSPRI,RKURCSSEC")(setBeanProperty b "Port" 20000)(setBeanProperty b "ServiceName" "redknee/I_2001_39/PPSMScreeningTemplates/ScreeningTemplatesApiFactory/v1") b)) c))(setBeanProperty b "Merger" (let ((b (com.redknee.service.proxy.client.LastResultMerger.)))  b))(setBeanProperty b "Config" (let ((b (com.redknee.service.corba.CorbaClientProperty.))) (setBeanProperty b "Username" "appcrm")(setBeanProperty b "Password" "appcrm")(setBeanProperty b "NameServiceHost" "RKURCSPRI")(setBeanProperty b "NameServiceContextName" "redknee/I_2001_39/PPSMScreeningTemplates/ScreeningTemplatesApiFactory/v1") b)) b))(setBeanProperty b "Validator" (let ((b (com.redknee.service.proxy.client.SameInterfaceRequestValidator.)))  b))(setBeanProperty b "Merger" (let ((b (com.redknee.service.proxy.client.LastResultMerger.)))  b))(setBeanProperty b "Converter" #null) b))))
(let ((ctx (getContext ctx "core"))) (let ((ctx (getContext ctx "AppCrmCore"))) (homeCreateOrStore (.get ctx com.redknee.service.proxy.ProxyInfoHome.class) (let ((b (com.redknee.service.proxy.ProxyInfo.))) (setBeanProperty b "Name" "LoyaltyProfileProvision")(setBeanProperty b "Plugin" "LoyaltyProfileProvision")(setBeanProperty b "Enabled" #f)(setBeanProperty b "Config" (let ((b (com.redknee.service.proxy.share.MultiplexerConfiguration.))) (setBeanProperty b "Broadcast" #f)(setBeanProperty b "Multiplexer" #null)(setBeanProperty b "Connections" (let ((c (java.util.ArrayList.))) (.add c (let ((b (com.redknee.service.proxy.share.LoadSharingNode.)))(setBeanProperty b "ConnectionId" "RKURCS")(setBeanProperty b "Hostname" "RKURCSPRI,RKURCSSEC")(setBeanProperty b "Port" 20000)(setBeanProperty b "ServiceName" "redknee/product/bundle/manager/LoyaltyCardProvision")(setBeanProperty b "FailoverStrategy" #null) b)) c))(setBeanProperty b "Merger" (let ((b (com.redknee.service.proxy.client.LastResultMerger.)))  b))(setBeanProperty b "Config" (let ((b (com.redknee.service.corba.CorbaClientProperty.))) (setBeanProperty b "Username" "appcrm")(setBeanProperty b "Password" "appcrm")(setBeanProperty b "NameServiceHost" "RKURCSPRI")(setBeanProperty b "NameServiceContextName" "/redknee/product/bundle/manager/LoyaltyCardProvision") b)) b))(setBeanProperty b "Validator" (let ((b (com.redknee.service.proxy.client.SameInterfaceRequestValidator.))) (setBeanProperty b "Expression" "") b))(setBeanProperty b "Merger" (let ((b (com.redknee.service.proxy.client.LastResultMerger.)))  b))(setBeanProperty b "Converter" #null) b))))
(let ((ctx (getContext ctx "core"))) (let ((ctx (getContext ctx "AppCrmCore"))) (homeCreateOrStore (.get ctx com.redknee.service.proxy.ProxyInfoHome.class) (let ((b (com.redknee.service.proxy.ProxyInfo.))) (setBeanProperty b "Name" "LoyaltyOperationsInterface")(setBeanProperty b "Plugin" "LoyaltyOperationsInterface")(setBeanProperty b "Enabled" #f)(setBeanProperty b "Config" (let ((b (com.redknee.service.proxy.share.MultiplexerConfiguration.))) (setBeanProperty b "Broadcast" #f)(setBeanProperty b "Multiplexer" #null)(setBeanProperty b "Connections" (let ((c (java.util.ArrayList.))) (.add c (let ((b (com.redknee.service.proxy.share.LoadSharingNode.)))(setBeanProperty b "ConnectionId" "RKURCS")(setBeanProperty b "Hostname" "RKURCSPRI,RKURCSSEC")(setBeanProperty b "Port" 20000)(setBeanProperty b "ServiceName" "redknee/app/urcs/LoyaltyOperation")(setBeanProperty b "FailoverStrategy" #null) b)) c))(setBeanProperty b "Merger" (let ((b (com.redknee.service.proxy.client.LastResultMerger.)))  b))(setBeanProperty b "Config" (let ((b (com.redknee.service.corba.CorbaClientProperty.))) (setBeanProperty b "Username" "appcrm")(setBeanProperty b "Password" "appcrm")(setBeanProperty b "NameServiceHost" "RKURCSPRI")(setBeanProperty b "NameServiceContextName" "/redknee/app/urcs/LoyaltyOperation") b)) b))(setBeanProperty b "Validator" (let ((b (com.redknee.service.proxy.client.SameInterfaceRequestValidator.))) (setBeanProperty b "Expression" "") b))(setBeanProperty b "Merger" (let ((b (com.redknee.service.proxy.client.LastResultMerger.)))  b))(setBeanProperty b "Converter" #null) b))))
(let ((ctx (getContext ctx "core"))) (let ((ctx (getContext ctx "AppCrmCore"))) (homeCreateOrStore (.get ctx com.redknee.service.proxy.ProxyInfoHome.class) (let ((b (com.redknee.service.proxy.ProxyInfo.))) (setBeanProperty b "Name" "SubscriberProv")(setBeanProperty b "Plugin" "SubscriberProv")(setBeanProperty b "Enabled" #f)(setBeanProperty b "Config" (let ((b (com.redknee.service.proxy.share.MultiplexerConfiguration.))) (setBeanProperty b "Broadcast" #f)(setBeanProperty b "Multiplexer" #null)(setBeanProperty b "Connections" (let ((c (java.util.ArrayList.))) (.add c (let ((b (com.redknee.service.proxy.share.LoadSharingNode.)))(setBeanProperty b "ConnectionId" "RKURCS")(setBeanProperty b "Hostname" "RKURCSPRI,RKURCSSEC")(setBeanProperty b "Port" 20000)(setBeanProperty b "ServiceName" "redknee/product/s2200/idr/UserAuth")(setBeanProperty b "FailoverStrategy" #null) b)) c))(setBeanProperty b "Merger" (let ((b (com.redknee.service.proxy.client.LastResultMerger.)))  b))(setBeanProperty b "Config" (let ((b (com.redknee.service.corba.CorbaClientProperty.))) (setBeanProperty b "Username" "appcrm")(setBeanProperty b "Password" "appcrm")(setBeanProperty b "NameServiceHost" "RKURCSPRI")(setBeanProperty b "NameServiceContextName" "redknee/product/s2200/idr/UserAuth") b)) b))(setBeanProperty b "Validator" (let ((b (com.redknee.service.proxy.client.SameInterfaceRequestValidator.))) (setBeanProperty b "Expression" "") b))(setBeanProperty b "Merger" (let ((b (com.redknee.service.proxy.client.LastResultMerger.)))  b))(setBeanProperty b "Converter" #null) b))))
(let ((ctx (getContext ctx "core"))) (let ((ctx (getContext ctx "AppCrmCore"))) (homeCreateOrStore (.get ctx com.redknee.service.proxy.ProxyInfoHome.class) (let ((b (com.redknee.service.proxy.ProxyInfo.))) (setBeanProperty b "Name" "CDMASubscriberProv")(setBeanProperty b "Plugin" "CDMASubscriberProv")(setBeanProperty b "Enabled" #f)(setBeanProperty b "Config" (let ((b (com.redknee.service.proxy.share.MultiplexerConfiguration.))) (setBeanProperty b "Broadcast" #f)(setBeanProperty b "Multiplexer" #null)(setBeanProperty b "Connections" (let ((c (java.util.ArrayList.))) (.add c (let ((b (com.redknee.service.proxy.share.LoadSharingNode.)))(setBeanProperty b "ConnectionId" "RKURCS")(setBeanProperty b "Hostname" "RKURCSPRI,RKURCSSEC")(setBeanProperty b "Port" 20000)(setBeanProperty b "ServiceName" "redknee/product/s2200/idr/provisioning/corba/UserAuth")(setBeanProperty b "FailoverStrategy" #null) b)) c))(setBeanProperty b "Merger" (let ((b (com.redknee.service.proxy.client.LastResultMerger.)))  b))(setBeanProperty b "Config" (let ((b (com.redknee.service.corba.CorbaClientProperty.))) (setBeanProperty b "Username" "appcrm")(setBeanProperty b "Password" "appcrm")(setBeanProperty b "NameServiceHost" "RKURCSPRI")(setBeanProperty b "NameServiceContextName" "redknee/product/s2200/idr/provisioning/corba/UserAuth") b)) b))(setBeanProperty b "Validator" (let ((b (com.redknee.service.proxy.client.SameInterfaceRequestValidator.))) (setBeanProperty b "Expression" "") b))(setBeanProperty b "Merger" (let ((b (com.redknee.service.proxy.client.LastResultMerger.)))  b))(setBeanProperty b "Converter" #null) b))))
(let ((ctx (getContext ctx "core"))) (let ((ctx (getContext ctx "AppCrmCore"))) (homeCreateOrStore (.get ctx com.redknee.service.proxy.ProxyInfoHome.class) (let ((b (com.redknee.service.proxy.ProxyInfo.))) (setBeanProperty b "Name" "ScreeningTemplateProvisionV5")(setBeanProperty b "Plugin" "ScreeningTemplateProvisionV5")(setBeanProperty b "Enabled" #f)(setBeanProperty b "Config" (let ((b (com.redknee.service.proxy.share.MultiplexerConfiguration.))) (setBeanProperty b "Broadcast" #f)(setBeanProperty b "Connections" (let ((c (java.util.ArrayList.))) (.add c (let ((b (com.redknee.service.proxy.share.LoadSharingNode.)))(setBeanProperty b "ConnectionId" "RKURCS")(setBeanProperty b "Hostname" "RKURCSPRI,RKURCSSEC")(setBeanProperty b "Port" 20000)(setBeanProperty b "ServiceName" "redknee/product/bundle/manager/v5_0/ScreeningTemplateProvision") b)) c))(setBeanProperty b "Config" (let ((b (com.redknee.service.corba.CorbaClientProperty.))) (setBeanProperty b "Username" "appcrm")(setBeanProperty b "Password" "appcrm")(setBeanProperty b "NameServiceHost" "RKURCSPRI")(setBeanProperty b "NameServiceContextName" "redknee/product/bundle/manager/v5_0/ScreeningTemplateProvision") b)) b))(setBeanProperty b "Validator" (let ((b (com.redknee.service.proxy.client.SameInterfaceRequestValidator.))) (setBeanProperty b "Expression" "") b)) b))))
(let ((ctx (getContext ctx "core"))) (let ((ctx (getContext ctx "AppCrmCore"))) (homeCreateOrStore (.get ctx com.redknee.service.proxy.ProxyInfoHome.class) (let ((b (com.redknee.service.proxy.ProxyInfo.))) (setBeanProperty b "Name" "ScreeningTemplateProvision")(setBeanProperty b "Plugin" "ScreeningTemplateProvision")(setBeanProperty b "Enabled" #f)(setBeanProperty b "Config" (let ((b (com.redknee.service.proxy.share.MultiplexerConfiguration.))) (setBeanProperty b "Broadcast" #f)(setBeanProperty b "Connections" (let ((c (java.util.ArrayList.))) (.add c (let ((b (com.redknee.service.proxy.share.LoadSharingNode.)))(setBeanProperty b "ConnectionId" "RKURCS")(setBeanProperty b "Hostname" "RKURCSPRI,RKURCSSEC")(setBeanProperty b "Port" 20000)(setBeanProperty b "ServiceName" "redknee/product/bundle/manager/v5_0/ScreeningTemplateProvision") b)) c))(setBeanProperty b "Config" (let ((b (com.redknee.service.corba.CorbaClientProperty.))) (setBeanProperty b "Username" "appcrm")(setBeanProperty b "Password" "appcrm")(setBeanProperty b "NameServiceHost" "RKURCSPRI")(setBeanProperty b "NameServiceContextName" "redknee/product/bundle/manager/v5_0/ScreeningTemplateProvision") b)) b))(setBeanProperty b "Validator" (let ((b (com.redknee.service.proxy.client.SameInterfaceRequestValidator.))) (setBeanProperty b "Expression" "") b)) b))))