;; Configuration sharing menu definitions
;; [Core -> Network -> Configuration Sharing]
(let ((ctx (getContext ctx "core"))) (homeCreateOrStore (.get ctx com.redknee.framework.xhome.menu.XMenuHome.class) (let ((b (com.redknee.framework.xhome.menu.XMenu.))) (setBeanProperty b "Key" "Partitioning")(setBeanProperty b "ParentKey" "Network")(setBeanProperty b "Label" "Configuration Sharing")(setBeanProperty b "MenuPredicate" (let ((b (com.redknee.framework.xhome.elang.True.instance)))  b))(setBeanProperty b "Borders" (let ((c (java.util.ArrayList.)))  c))(setBeanProperty b "CustomizationScript" "")(setBeanProperty b "Config" (let ((b (com.redknee.framework.xhome.menu.XMenuMenuConfig.)))  b)) b)))
(let ((ctx (getContext ctx "core"))) (homeCreateOrStore (.get ctx com.redknee.framework.xhome.menu.XMenuHome.class) (let ((b (com.redknee.framework.xhome.menu.XMenu.))) (setBeanProperty b "Key" "PartitionEntities")(setBeanProperty b "ParentKey" "Partitioning")(setBeanProperty b "Label" "Partitions")(setBeanProperty b "Type" "WebController")(setBeanProperty b "MenuPredicate" (let ((b (com.redknee.framework.xhome.elang.True.instance)))  b))(setBeanProperty b "Borders" (let ((c (java.util.ArrayList.)))  c))(setBeanProperty b "CustomizationScript" "")(setBeanProperty b "Config" (let ((b (com.redknee.framework.xhome.menu.XMenuWebControllerConfig.))) (setBeanProperty b "TableWebControl" (let ((b (com.redknee.framework.core.scripting.BeanShellExecutor.))) (setBeanProperty b "Script" "") b))(setBeanProperty b "WebControl" "")(setBeanProperty b "RequiredClass" "com.redknee.util.partitioning.config.PartitionEntity")(setBeanProperty b "BackPredicate" (let ((b (com.redknee.framework.xhome.elang.True.instance)))  b))(setBeanProperty b "DeletePredicate" (let ((b (com.redknee.framework.xhome.elang.True.instance)))  b))(setBeanProperty b "HelpPredicate" (let ((b (com.redknee.framework.xhome.elang.True.instance)))  b))(setBeanProperty b "NewPredicate" (let ((b (com.redknee.framework.xhome.elang.True.instance)))  b))(setBeanProperty b "SavePredicate" (let ((b (com.redknee.framework.xhome.elang.True.instance)))  b))(setBeanProperty b "PreviewPredicate" (let ((b (com.redknee.framework.xhome.elang.True.instance)))  b))(setBeanProperty b "CopyPredicate" (let ((b (com.redknee.framework.xhome.elang.True.instance)))  b))(setBeanProperty b "UpdatePredicate" (let ((b (com.redknee.framework.xhome.elang.True.instance)))  b))(setBeanProperty b "Actions" (let ((c (java.util.ArrayList.))) (.add c (let ((b (com.redknee.framework.xhome.menu.Action.)))(setBeanProperty b "WebAction" (let ((b (com.redknee.framework.xhome.web.action.DeleteAction.))) (setBeanProperty b "Key" "delete")(setBeanProperty b "Label" "Delete")(setBeanProperty b "Predicate" (let ((b (com.redknee.framework.xhome.elang.True.instance)))  b))(setBeanProperty b "Help" "Delete the current bean.") b)) b))(.add c (let ((b (com.redknee.framework.xhome.menu.Action.)))(setBeanProperty b "WebAction" (let ((b (com.redknee.framework.xhome.web.action.EditAction.))) (setBeanProperty b "Key" "edit")(setBeanProperty b "Label" "Edit")(setBeanProperty b "Predicate" (let ((b (com.redknee.framework.xhome.elang.True.instance)))  b))(setBeanProperty b "Help" "Edit the bean in edit mode.") b)) b))(.add c (let ((b (com.redknee.framework.xhome.menu.Action.)))(setBeanProperty b "WebAction" (let ((b (com.redknee.framework.xhome.web.action.ViewAction.))) (setBeanProperty b "Key" "view")(setBeanProperty b "Label" "View")(setBeanProperty b "Predicate" (let ((b (com.redknee.framework.xhome.elang.True.instance)))  b))(setBeanProperty b "Help" "View the bean in read-only mode.") b)) b)) c))(setBeanProperty b "FieldModes" (MapSupport.fromList (let ((c (java.util.ArrayList.))) (.add c (let ((b (com.redknee.framework.xhome.menu.FieldMode.)))(setBeanProperty b "FieldName" "beans")(setBeanProperty b "ViewMode" (let ((b (com.redknee.framework.xhome.elang.Not.))) (setBeanProperty b "Arg1" (let ((b (com.redknee.util.partitioning.xhome.filter.GlobalPartitionRoutingPredicate.)))  b)) b))(setBeanProperty b "UpdateMode" (let ((b (com.redknee.framework.xhome.elang.Not.))) (setBeanProperty b "Arg1" (let ((b (com.redknee.util.partitioning.xhome.filter.GlobalPartitionRoutingPredicate.)))  b)) b)) b))(.add c (let ((b (com.redknee.framework.xhome.menu.FieldMode.)))(setBeanProperty b "FieldName" "threadpoolConfig")(setBeanProperty b "ViewMode" (let ((b (com.redknee.framework.xhome.elang.False.instance)))  b))(setBeanProperty b "UpdateMode" (let ((b (com.redknee.framework.xhome.elang.False.instance)))  b)) b)) c))) b)) b)))
(let ((ctx (getContext ctx "core"))) (homeCreateOrStore (.get ctx com.redknee.framework.xhome.menu.XMenuHome.class) (let ((b (com.redknee.framework.xhome.menu.XMenu.))) (setBeanProperty b "Key" "PartitionBeanServices")(setBeanProperty b "ParentKey" "Partitioning")(setBeanProperty b "Label" "Bean/RMI Service Mappings")(setBeanProperty b "Visible" #f)(setBeanProperty b "Type" "WebController")(setBeanProperty b "MenuPredicate" (let ((b (com.redknee.util.partitioning.xhome.filter.GlobalPartitionRoutingPredicate.)))  b))(setBeanProperty b "Borders" (let ((c (java.util.ArrayList.)))  c))(setBeanProperty b "CustomizationScript" "")(setBeanProperty b "Config" (let ((b (com.redknee.framework.xhome.menu.XMenuWebControllerConfig.))) (setBeanProperty b "TableWebControl" (let ((b (com.redknee.framework.core.scripting.BeanShellExecutor.))) (setBeanProperty b "Script" "") b))(setBeanProperty b "WebControl" "")(setBeanProperty b "RequiredClass" "com.redknee.util.partitioning.config.BeanServiceMapping")(setBeanProperty b "BackPredicate" (let ((b (com.redknee.framework.xhome.elang.True.instance)))  b))(setBeanProperty b "DeletePredicate" (let ((b (com.redknee.framework.xhome.elang.True.instance)))  b))(setBeanProperty b "HelpPredicate" (let ((b (com.redknee.framework.xhome.elang.True.instance)))  b))(setBeanProperty b "NewPredicate" (let ((b (com.redknee.framework.xhome.elang.True.instance)))  b))(setBeanProperty b "SavePredicate" (let ((b (com.redknee.framework.xhome.elang.True.instance)))  b))(setBeanProperty b "PreviewPredicate" (let ((b (com.redknee.framework.xhome.elang.True.instance)))  b))(setBeanProperty b "CopyPredicate" (let ((b (com.redknee.framework.xhome.elang.True.instance)))  b))(setBeanProperty b "UpdatePredicate" (let ((b (com.redknee.framework.xhome.elang.True.instance)))  b))(setBeanProperty b "Actions" (let ((c (java.util.ArrayList.))) (.add c (let ((b (com.redknee.framework.xhome.menu.Action.)))(setBeanProperty b "WebAction" (let ((b (com.redknee.framework.xhome.web.action.DeleteAction.))) (setBeanProperty b "Key" "delete")(setBeanProperty b "Label" "Delete")(setBeanProperty b "Predicate" (let ((b (com.redknee.framework.xhome.elang.True.instance)))  b))(setBeanProperty b "Help" "Delete the current bean.") b)) b))(.add c (let ((b (com.redknee.framework.xhome.menu.Action.)))(setBeanProperty b "WebAction" (let ((b (com.redknee.framework.xhome.web.action.EditAction.))) (setBeanProperty b "Key" "edit")(setBeanProperty b "Label" "Edit")(setBeanProperty b "Predicate" (let ((b (com.redknee.framework.xhome.elang.True.instance)))  b))(setBeanProperty b "Help" "Edit the bean in edit mode.") b)) b))(.add c (let ((b (com.redknee.framework.xhome.menu.Action.)))(setBeanProperty b "WebAction" (let ((b (com.redknee.framework.xhome.web.action.ViewAction.))) (setBeanProperty b "Key" "view")(setBeanProperty b "Label" "View")(setBeanProperty b "Predicate" (let ((b (com.redknee.framework.xhome.elang.True.instance)))  b))(setBeanProperty b "Help" "View the bean in read-only mode.") b)) b)) c))(setBeanProperty b "FieldModes" (MapSupport.fromList (let ((c (java.util.ArrayList.)))  c))) b)) b)))
(let ((ctx (getContext ctx "core"))) (homeCreateOrStore (.get ctx com.redknee.framework.xhome.menu.XMenuHome.class) (let ((b (com.redknee.framework.xhome.menu.XMenu.))) (setBeanProperty b "Key" "PartitionableBeans")(setBeanProperty b "ParentKey" "Partitioning")(setBeanProperty b "Label" "Beans")(setBeanProperty b "Visible" #f)(setBeanProperty b "Type" "WebController")(setBeanProperty b "MenuPredicate" (let ((b (com.redknee.framework.xhome.elang.True.instance)))  b))(setBeanProperty b "Borders" (let ((c (java.util.ArrayList.)))  c))(setBeanProperty b "CustomizationScript" "")(setBeanProperty b "Config" (let ((b (com.redknee.framework.xhome.menu.XMenuWebControllerConfig.))) (setBeanProperty b "TableWebControl" (let ((b (com.redknee.framework.core.scripting.BeanShellExecutor.))) (setBeanProperty b "Script" "") b))(setBeanProperty b "WebControl" "")(setBeanProperty b "RequiredClass" "com.redknee.util.partitioning.config.PartitionableBean")(setBeanProperty b "BackPredicate" (let ((b (com.redknee.framework.xhome.elang.True.instance)))  b))(setBeanProperty b "DeletePredicate" (let ((b (com.redknee.util.partitioning.xhome.filter.TwoPhaseCommitOKPredicate.)))  b))(setBeanProperty b "HelpPredicate" (let ((b (com.redknee.framework.xhome.elang.True.instance)))  b))(setBeanProperty b "NewPredicate" (let ((b (com.redknee.util.partitioning.xhome.filter.TwoPhaseCommitOKPredicate.)))  b))(setBeanProperty b "SavePredicate" (let ((b (com.redknee.util.partitioning.xhome.filter.TwoPhaseCommitOKPredicate.)))  b))(setBeanProperty b "PreviewPredicate" (let ((b (com.redknee.framework.xhome.elang.True.instance)))  b))(setBeanProperty b "CopyPredicate" (let ((b (com.redknee.util.partitioning.xhome.filter.TwoPhaseCommitOKPredicate.)))  b))(setBeanProperty b "UpdatePredicate" (let ((b (com.redknee.util.partitioning.xhome.filter.TwoPhaseCommitOKPredicate.)))  b))(setBeanProperty b "Actions" (let ((c (java.util.ArrayList.))) (.add c (let ((b (com.redknee.framework.xhome.menu.Action.)))(setBeanProperty b "WebAction" (let ((b (com.redknee.framework.xhome.web.action.DeleteAction.))) (setBeanProperty b "Key" "delete")(setBeanProperty b "Label" "Delete")(setBeanProperty b "Predicate" (let ((b (com.redknee.util.partitioning.xhome.filter.TwoPhaseCommitOKPredicate.)))  b))(setBeanProperty b "Help" "Delete the current bean.") b)) b))(.add c (let ((b (com.redknee.framework.xhome.menu.Action.)))(setBeanProperty b "WebAction" (let ((b (com.redknee.framework.xhome.web.action.EditAction.))) (setBeanProperty b "Key" "edit")(setBeanProperty b "Label" "Edit")(setBeanProperty b "Predicate" (let ((b (com.redknee.util.partitioning.xhome.filter.TwoPhaseCommitOKPredicate.)))  b))(setBeanProperty b "Help" "Edit the bean in edit mode.") b)) b))(.add c (let ((b (com.redknee.framework.xhome.menu.Action.)))(setBeanProperty b "WebAction" (let ((b (com.redknee.framework.xhome.web.action.ViewAction.))) (setBeanProperty b "Key" "view")(setBeanProperty b "Label" "View")(setBeanProperty b "Predicate" (let ((b (com.redknee.framework.xhome.elang.True.instance)))  b))(setBeanProperty b "Help" "View the bean in read-only mode.") b)) b)) c))(setBeanProperty b "FieldModes" (MapSupport.fromList (let ((c (java.util.ArrayList.)))  c))) b)) b)))
(let ((ctx (getContext ctx "core"))) (homeCreateOrStore (.get ctx com.redknee.framework.xhome.menu.XMenuHome.class) (let ((b (com.redknee.framework.xhome.menu.XMenu.))) (setBeanProperty b "Key" "GeneralConfig")(setBeanProperty b "ParentKey" "Partitioning")(setBeanProperty b "Label" "Configuration")(setBeanProperty b "Visible" #f)(setBeanProperty b "Type" "Bean")(setBeanProperty b "MenuPredicate" (let ((b (com.redknee.framework.xhome.elang.True.instance)))  b))(setBeanProperty b "Borders" (let ((c (java.util.ArrayList.)))  c))(setBeanProperty b "CustomizationScript" "")(setBeanProperty b "Config" (let ((b (com.redknee.framework.xhome.menu.XMenuBeanConfig.))) (setBeanProperty b "BeanClass" "com.redknee.util.partitioning.GeneralConfiguration")(setBeanProperty b "UpdatePredicate" (let ((b (com.redknee.framework.xhome.elang.True.instance)))  b))(setBeanProperty b "BeanWebControl" "") b)) b)))
(let ((ctx (getContext ctx "core"))) (homeCreateOrStore (.get ctx com.redknee.framework.xhome.menu.XMenuHome.class) (let ((b (com.redknee.framework.xhome.menu.XMenu.))) (setBeanProperty b "Key" "PartitionHomes")(setBeanProperty b "ParentKey" "Partitioning")(setBeanProperty b "Label" "Homes")(setBeanProperty b "Visible" #f)(setBeanProperty b "MenuPredicate" (let ((b (com.redknee.framework.xhome.elang.True.instance)))  b))(setBeanProperty b "Borders" (let ((c (java.util.ArrayList.)))  c))(setBeanProperty b "CustomizationScript" "")(setBeanProperty b "Config" (let ((b (com.redknee.framework.xhome.menu.XMenuMenuConfig.)))  b)) b)))
(let ((ctx (getContext ctx "core"))) (homeCreateOrStore (.get ctx com.redknee.framework.xhome.menu.XMenuHome.class) (let ((b (com.redknee.framework.xhome.menu.XMenu.))) (setBeanProperty b "Key" "MsisdnList")(setBeanProperty b "ParentKey" "Partitioning")(setBeanProperty b "Label" "MSISDN Table")(setBeanProperty b "Visible" #f)(setBeanProperty b "Type" "WebController")(setBeanProperty b "MenuPredicate" (let ((b (com.redknee.framework.xhome.elang.True.instance)))  b))(setBeanProperty b "Borders" (let ((c (java.util.ArrayList.))) (.add c (let ((b (com.redknee.framework.xhome.menu.MenuBorder.)))(setBeanProperty b "Script" "new com.redknee.util.partitioning.xhome.web.MsisdnTableActionBorder()") b)) c))(setBeanProperty b "CustomizationScript" "")(setBeanProperty b "Config" (let ((b (com.redknee.framework.xhome.menu.XMenuWebControllerConfig.))) (setBeanProperty b "TableWebControl" (let ((b (com.redknee.framework.core.scripting.BeanShellExecutor.))) (setBeanProperty b "Script" "") b))(setBeanProperty b "WebControl" "")(setBeanProperty b "RequiredClass" "com.redknee.util.partitioning.partition.rules.MsisdnMigration")(setBeanProperty b "BackPredicate" (let ((b (com.redknee.framework.xhome.elang.True.instance)))  b))(setBeanProperty b "DeletePredicate" (let ((b (com.redknee.framework.xhome.elang.True.instance)))  b))(setBeanProperty b "HelpPredicate" (let ((b (com.redknee.framework.xhome.elang.True.instance)))  b))(setBeanProperty b "NewPredicate" (let ((b (com.redknee.framework.xhome.elang.True.instance)))  b))(setBeanProperty b "SavePredicate" (let ((b (com.redknee.framework.xhome.elang.True.instance)))  b))(setBeanProperty b "PreviewPredicate" (let ((b (com.redknee.framework.xhome.elang.True.instance)))  b))(setBeanProperty b "CopyPredicate" (let ((b (com.redknee.framework.xhome.elang.True.instance)))  b))(setBeanProperty b "UpdatePredicate" (let ((b (com.redknee.framework.xhome.elang.True.instance)))  b))(setBeanProperty b "Actions" (let ((c (java.util.ArrayList.))) (.add c (let ((b (com.redknee.framework.xhome.menu.Action.)))(setBeanProperty b "WebAction" (let ((b (com.redknee.framework.xhome.web.action.DeleteAction.))) (setBeanProperty b "Key" "delete")(setBeanProperty b "Label" "Delete")(setBeanProperty b "Predicate" (let ((b (com.redknee.framework.xhome.elang.True.instance)))  b))(setBeanProperty b "DetailView" #t)(setBeanProperty b "Help" "Delete the current bean.") b)) b))(.add c (let ((b (com.redknee.framework.xhome.menu.Action.)))(setBeanProperty b "WebAction" (let ((b (com.redknee.framework.xhome.web.action.EditAction.))) (setBeanProperty b "Key" "edit")(setBeanProperty b "Label" "Edit")(setBeanProperty b "Predicate" (let ((b (com.redknee.framework.xhome.elang.True.instance)))  b))(setBeanProperty b "Help" "Edit the bean in edit mode.") b)) b))(.add c (let ((b (com.redknee.framework.xhome.menu.Action.)))(setBeanProperty b "WebAction" (let ((b (com.redknee.framework.xhome.web.action.ViewAction.))) (setBeanProperty b "Key" "view")(setBeanProperty b "Label" "View")(setBeanProperty b "Predicate" (let ((b (com.redknee.framework.xhome.elang.True.instance)))  b))(setBeanProperty b "Help" "View the bean in read-only mode.") b)) b)) c))(setBeanProperty b "FieldModes" (MapSupport.fromList (let ((c (java.util.ArrayList.)))  c))) b)) b)))
(let ((ctx (getContext ctx "core"))) (homeCreateOrStore (.get ctx com.redknee.framework.xhome.menu.XMenuHome.class) (let ((b (com.redknee.framework.xhome.menu.XMenu.))) (setBeanProperty b "Key" "AppCrmCoreConfigBeanClassMapping")(setBeanProperty b "ParentKey" "Partitioning")(setBeanProperty b "Label" "Request/Bean Class Mappings")(setBeanProperty b "Type" "WebController")(setBeanProperty b "MenuPredicate" (let ((b (com.redknee.framework.xhome.elang.True.instance)))  b))(setBeanProperty b "Borders" (let ((c (java.util.ArrayList.)))  c))(setBeanProperty b "CustomizationScript" "")(setBeanProperty b "Config" (let ((b (com.redknee.framework.xhome.menu.XMenuWebControllerConfig.))) (setBeanProperty b "TableWebControl" (let ((b (com.redknee.framework.core.scripting.BeanShellExecutor.))) (setBeanProperty b "Script" "") b))(setBeanProperty b "WebControl" "")(setBeanProperty b "RequiredClass" "com.redknee.app.crm.configshare.BeanClassMapping")(setBeanProperty b "BackPredicate" (let ((b (com.redknee.framework.xhome.elang.True.instance)))  b))(setBeanProperty b "DeletePredicate" (let ((b (com.redknee.framework.xhome.elang.True.instance)))  b))(setBeanProperty b "HelpPredicate" (let ((b (com.redknee.framework.xhome.elang.True.instance)))  b))(setBeanProperty b "NewPredicate" (let ((b (com.redknee.framework.xhome.elang.True.instance)))  b))(setBeanProperty b "SavePredicate" (let ((b (com.redknee.framework.xhome.elang.True.instance)))  b))(setBeanProperty b "PreviewPredicate" (let ((b (com.redknee.framework.xhome.elang.True.instance)))  b))(setBeanProperty b "CopyPredicate" (let ((b (com.redknee.framework.xhome.elang.True.instance)))  b))(setBeanProperty b "UpdatePredicate" (let ((b (com.redknee.framework.xhome.elang.True.instance)))  b))(setBeanProperty b "Actions" (let ((c (java.util.ArrayList.))) (.add c (let ((b (com.redknee.framework.xhome.menu.Action.)))(setBeanProperty b "WebAction" (let ((b (com.redknee.framework.xhome.web.action.DeleteAction.))) (setBeanProperty b "Key" "delete")(setBeanProperty b "Label" "Delete")(setBeanProperty b "Predicate" (let ((b (com.redknee.framework.xhome.elang.True.instance)))  b))(setBeanProperty b "DetailView" #t)(setBeanProperty b "Help" "Delete the current bean.") b)) b))(.add c (let ((b (com.redknee.framework.xhome.menu.Action.)))(setBeanProperty b "WebAction" (let ((b (com.redknee.framework.xhome.web.action.EditAction.))) (setBeanProperty b "Key" "edit")(setBeanProperty b "Label" "Edit")(setBeanProperty b "Predicate" (let ((b (com.redknee.framework.xhome.elang.True.instance)))  b))(setBeanProperty b "Help" "Edit the bean in edit mode.") b)) b))(.add c (let ((b (com.redknee.framework.xhome.menu.Action.)))(setBeanProperty b "WebAction" (let ((b (com.redknee.framework.xhome.web.action.ViewAction.))) (setBeanProperty b "Key" "view")(setBeanProperty b "Label" "View")(setBeanProperty b "Predicate" (let ((b (com.redknee.framework.xhome.elang.True.instance)))  b))(setBeanProperty b "Help" "View the bean in read-only mode.") b)) b)) c))(setBeanProperty b "FieldModes" (MapSupport.fromList (let ((c (java.util.ArrayList.)))  c))) b)) b)))
(let ((ctx (getContext ctx "core"))) (homeCreateOrStore (.get ctx com.redknee.framework.xhome.menu.XMenuHome.class) (let ((b (com.redknee.framework.xhome.menu.XMenu.))) (setBeanProperty b "Key" "appCrmCoreConfigShareSync")(setBeanProperty b "ParentKey" "Partitioning")(setBeanProperty b "Label" "Synchronization Tool")(setBeanProperty b "Type" "Service")(setBeanProperty b "MenuPredicate" (let ((b (com.redknee.framework.xhome.elang.True.instance)))  b))(setBeanProperty b "Borders" (let ((c (java.util.ArrayList.)))  c))(setBeanProperty b "CustomizationScript" "")(setBeanProperty b "Help" "com.redknee.app.crm.configshare.SharedConfigSyncFormHelpWebControl.instance()")(setBeanProperty b "Config" (let ((b (com.redknee.framework.xhome.menu.XMenuServiceConfig.))) (setBeanProperty b "RequestServicer" "new com.redknee.app.crm.configshare.SharedConfigSyncRequestServicer();") b)) b)))
(let ((ctx (getContext ctx "core"))) (homeCreateOrStore (.get ctx com.redknee.framework.xhome.menu.XMenuHome.class) (let ((b (com.redknee.framework.xhome.menu.XMenu.))) (setBeanProperty b "Key" "failureJournalCfg")(setBeanProperty b "ParentKey" "Partitioning")(setBeanProperty b "Label" "Failure Journal Configuration")(setBeanProperty b "Borders" (let ((c (java.util.ArrayList.)))  c))(setBeanProperty b "CustomizationScript" "")(setBeanProperty b "Config" (let ((b (com.redknee.framework.xhome.menu.XMenuBeanConfig.))) (setBeanProperty b "BeanClass" "com.redknee.framework.xhome.journal.JournalConfig")(setBeanProperty b "SpecialBeanName" "FailedOperationsAuditJournalConfig")(setBeanProperty b "BeanWebControl" "")(setBeanProperty b "FieldModes" (MapSupport.fromList (let ((c (java.util.ArrayList.)))  c))) b)) b)))

;; Root [Configuration Sharing Connections] - DO NOT CHANGE PARENT KEY HERE.  CUSTOMIZE IT IN YOUR APP JOURNAL.
(let ((ctx (getContext ctx "core"))) (homeCreateOrStore (.get ctx com.redknee.framework.xhome.menu.XMenuHome.class) (let ((b (com.redknee.framework.xhome.menu.XMenu.))) (setBeanProperty b "Key" "AppCrmCorePartitionConnections")(setBeanProperty b "Label" "Configuration Sharing Connections")(setBeanProperty b "Type" "WebController")(setBeanProperty b "MenuPredicate" (let ((b (com.redknee.framework.xhome.elang.True.instance)))  b))(setBeanProperty b "Borders" (let ((c (java.util.ArrayList.))) (.add c (let ((b (com.redknee.framework.xhome.menu.MenuBorder.)))(setBeanProperty b "Script" "new com.redknee.app.crm.configshare.FilteredPartitionTypeBorder(com.redknee.util.partitioning.config.PartitionTypeEnum.REMOTE);") b)) c))(setBeanProperty b "CustomizationScript" "")(setBeanProperty b "Config" (let ((b (com.redknee.framework.xhome.menu.XMenuWebControllerConfig.))) (setBeanProperty b "TableWebControl" (let ((b (com.redknee.framework.core.scripting.BeanShellExecutor.))) (setBeanProperty b "Script" "") b))(setBeanProperty b "WebControl" "")(setBeanProperty b "RequiredClass" "com.redknee.util.partitioning.config.PartitionEntity")(setBeanProperty b "BackPredicate" (let ((b (com.redknee.framework.xhome.elang.True.instance)))  b))(setBeanProperty b "DeletePredicate" (let ((b (com.redknee.framework.xhome.elang.False.instance)))  b))(setBeanProperty b "HelpPredicate" (let ((b (com.redknee.framework.xhome.elang.True.instance)))  b))(setBeanProperty b "NewPredicate" (let ((b (com.redknee.framework.xhome.elang.False.instance)))  b))(setBeanProperty b "SavePredicate" (let ((b (com.redknee.framework.xhome.elang.True.instance)))  b))(setBeanProperty b "PreviewPredicate" (let ((b (com.redknee.framework.xhome.elang.True.instance)))  b))(setBeanProperty b "CopyPredicate" (let ((b (com.redknee.framework.xhome.elang.False.instance)))  b))(setBeanProperty b "UpdatePredicate" (let ((b (com.redknee.framework.xhome.elang.True.instance)))  b))(setBeanProperty b "Actions" (let ((c (java.util.ArrayList.))) (.add c (let ((b (com.redknee.framework.xhome.menu.Action.)))(setBeanProperty b "WebAction" (let ((b (com.redknee.framework.xhome.web.action.EditAction.))) (setBeanProperty b "Key" "edit")(setBeanProperty b "Label" "Edit")(setBeanProperty b "Predicate" (let ((b (com.redknee.framework.xhome.elang.True.instance)))  b))(setBeanProperty b "Help" "Edit the bean in edit mode.") b)) b))(.add c (let ((b (com.redknee.framework.xhome.menu.Action.)))(setBeanProperty b "WebAction" (let ((b (com.redknee.framework.xhome.web.action.ViewAction.))) (setBeanProperty b "Key" "view")(setBeanProperty b "Label" "View")(setBeanProperty b "Predicate" (let ((b (com.redknee.framework.xhome.elang.True.instance)))  b))(setBeanProperty b "Help" "View the bean in read-only mode.") b)) b)) c))(setBeanProperty b "FieldModes" (MapSupport.fromList (let ((c (java.util.ArrayList.))) (.add c (let ((b (com.redknee.framework.xhome.menu.FieldMode.)))(setBeanProperty b "FieldName" "childPartitions")(setBeanProperty b "ViewMode" (let ((b (com.redknee.framework.xhome.elang.False.instance)))  b))(setBeanProperty b "UpdateMode" (let ((b (com.redknee.framework.xhome.elang.False.instance)))  b)) b))(.add c (let ((b (com.redknee.framework.xhome.menu.FieldMode.)))(setBeanProperty b "FieldName" "beans")(setBeanProperty b "ViewMode" (let ((b (com.redknee.framework.xhome.elang.False.instance)))  b))(setBeanProperty b "UpdateMode" (let ((b (com.redknee.framework.xhome.elang.False.instance)))  b)) b))(.add c (let ((b (com.redknee.framework.xhome.menu.FieldMode.)))(setBeanProperty b "FieldName" "partitionType")(setBeanProperty b "ViewMode" (let ((b (com.redknee.framework.xhome.elang.False.instance)))  b))(setBeanProperty b "UpdateMode" (let ((b (com.redknee.framework.xhome.elang.False.instance)))  b)) b))(.add c (let ((b (com.redknee.framework.xhome.menu.FieldMode.)))(setBeanProperty b "FieldName" "threadpoolConfig")(setBeanProperty b "ViewMode" (let ((b (com.redknee.framework.xhome.elang.False.instance)))  b))(setBeanProperty b "UpdateMode" (let ((b (com.redknee.framework.xhome.elang.False.instance)))  b)) b)) c))) b)) b)))
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              
;; Switch partitioning config to journal
(let ((ctx (getContext ctx "core"))) (bindBean ctx com.redknee.util.partitioning.GeneralConfiguration.class com.redknee.util.partitioning.GeneralConfiguration.class))
(let ((ctx (getContext ctx "core"))) (let ((b (.get ctx com.redknee.util.partitioning.GeneralConfiguration.class))) (setBeanProperty b "storage" (com.redknee.util.partitioning.StorageTypeEnum.get 2s)) b))

;; Bind partitioning homes
(let ((ctx (getContext ctx "core"))) (let ((ctx (getContext ctx "Application"))) (bindHome ctx com.redknee.util.partitioning.config.PartitionableBeanHome.class com.redknee.util.partitioning.config.PartitionableBean.class)))
(let ((ctx (getContext ctx "core"))) (let ((ctx (getContext ctx "Application"))) (bindHome ctx com.redknee.util.partitioning.config.BeanServiceMappingHome.class com.redknee.util.partitioning.config.BeanServiceMapping.class)))
(let ((ctx (getContext ctx "core"))) (let ((ctx (getContext ctx "Application"))) (bindHome ctx com.redknee.util.partitioning.config.PartitionEntityHome.class com.redknee.util.partitioning.config.PartitionEntity.class)))
(let ((ctx (getContext ctx "core"))) (let ((ctx (getContext ctx "Application"))) (bindHome ctx com.redknee.util.partitioning.partition.rules.RoutingRuleHome.class com.redknee.util.partitioning.partition.rules.RoutingRule.class)))
(let ((ctx (getContext ctx "core"))) (let ((ctx (getContext ctx "Application"))) (bindHome ctx com.redknee.util.partitioning.partition.rules.BeanRoutingRulesHome.class com.redknee.util.partitioning.partition.rules.BeanRoutingRules.class)))
(let ((ctx (getContext ctx "core"))) (let ((ctx (getContext ctx "Application"))) (bindHome ctx com.redknee.util.partitioning.partition.rules.TwoPhaseCommitHistoryHome.class com.redknee.util.partitioning.partition.rules.TwoPhaseCommitHistory.class)))
(let ((ctx (getContext ctx "core"))) (let ((ctx (getContext ctx "Application"))) (bindHome ctx com.redknee.util.partitioning.config.NodeHomeScriptHome.class com.redknee.util.partitioning.config.NodeHomeScript.class)))
(let ((ctx (getContext ctx "core"))) (let ((ctx (getContext ctx "Application"))) (bindHome ctx com.redknee.app.crm.configshare.BeanClassMappingHome.class com.redknee.app.crm.configshare.BeanClassMapping.class)))

;; Remove rules that we don't want to use
(let ((ctx (getContext ctx "core"))) (let ((home (.get ctx com.redknee.framework.xhome.entity.EntityInfoHome.class)) (bean (let ((b (com.redknee.framework.xhome.entity.EntityInfo.))) (setBeanProperty b "Name" "MSISDN Match Rule")(setBeanProperty b "ClassName" "com.redknee.util.partitioning.partition.rules.MsisdnMatchRule")(setBeanProperty b "Roles" (let ((c (java.util.ArrayList.)))  c))(setBeanProperty b "Prototype" (let ((b (com.redknee.util.partitioning.partition.rules.MsisdnMatchRule.)))  b)) b))) (.remove home bean)))
(let ((ctx (getContext ctx "core"))) (let ((home (.get ctx com.redknee.framework.xhome.entity.EntityInfoHome.class)) (bean (let ((b (com.redknee.framework.xhome.entity.EntityInfo.))) (setBeanProperty b "Name" "MSISDN Prefix Rule")(setBeanProperty b "ClassName" "com.redknee.util.partitioning.partition.rules.MsisdnPrefixRule")(setBeanProperty b "Roles" (let ((c (java.util.ArrayList.)))  c))(setBeanProperty b "Prototype" (let ((b (com.redknee.util.partitioning.partition.rules.MsisdnPrefixRule.))) (setBeanProperty b "PrefixList" (let ((c (java.util.ArrayList.)))  c)) b)) b))) (.remove home bean)))
(let ((ctx (getContext ctx "core"))) (let ((home (.get ctx com.redknee.framework.xhome.entity.EntityInfoHome.class)) (bean (let ((b (com.redknee.framework.xhome.entity.EntityInfo.))) (setBeanProperty b "Name" "SPID Rule")(setBeanProperty b "ClassName" "com.redknee.util.partitioning.partition.rules.SpidRule")(setBeanProperty b "Roles" (let ((c (java.util.ArrayList.)))  c))(setBeanProperty b "Prototype" (let ((b (com.redknee.util.partitioning.partition.rules.SpidRule.))) (setBeanProperty b "SpidList" (MapSupport.fromList (let ((c (java.util.ArrayList.)))  c))) b)) b))) (.remove home bean)))
(let ((ctx (getContext ctx "core"))) (let ((home (.get ctx com.redknee.framework.xhome.entity.EntityInfoHome.class)) (bean (let ((b (com.redknee.framework.xhome.entity.EntityInfo.))) (setBeanProperty b "Name" "Validator Rule")(setBeanProperty b "ClassName" "com.redknee.util.partitioning.partition.rules.ValidatorRule")(setBeanProperty b "Roles" (let ((c (java.util.ArrayList.)))  c))(setBeanProperty b "Prototype" (let ((b (com.redknee.util.partitioning.partition.rules.ValidatorRule.))) (setBeanProperty b "Validator" #null) b)) b))) (.remove home bean)))

;; Shared configuration rule definitions (i.e. EntityInfo)
(let ((ctx (getContext ctx "core"))) (homeCreateOrStore (.get ctx com.redknee.framework.xhome.entity.EntityInfoHome.class) (let ((b (com.redknee.framework.xhome.entity.EntityInfo.))) (setBeanProperty b "Name" "Configuration Change Request (Detailed)")(setBeanProperty b "ClassName" "com.redknee.app.crm.configshare.ConfigChangeRequestRoutingRule")(setBeanProperty b "Roles" (let ((c (java.util.ArrayList.)))  c))(setBeanProperty b "Prototype" (let ((b (com.redknee.app.crm.configshare.ConfigChangeRequestRoutingRule.)))  b)) b)))
(let ((ctx (getContext ctx "core"))) (homeCreateOrStore (.get ctx com.redknee.framework.xhome.entity.EntityInfoHome.class) (let ((b (com.redknee.framework.xhome.entity.EntityInfo.))) (setBeanProperty b "Name" "Shared Configuration")(setBeanProperty b "ClassName" "com.redknee.app.crm.configshare.ConfigSharingRoutingRule")(setBeanProperty b "Roles" (let ((c (java.util.ArrayList.)))  c))(setBeanProperty b "Prototype" (let ((b (com.redknee.app.crm.configshare.ConfigSharingRoutingRule.)))  b)) b)))

;; Register config sharing bean
(let ((ctx (getContext ctx "core"))) (let ((ctx (getContext ctx "Application"))) (homeCreateOrStore (.get ctx com.redknee.util.partitioning.config.PartitionableBeanHome.class) (let ((b (com.redknee.util.partitioning.config.PartitionableBean.))) (setBeanProperty b "BeanClass" "com.redknee.app.crm.configshare.ConfigChangeRequest")(setBeanProperty b "LocalOnlyOperations" (SetSupport.fromString (com.redknee.util.partitioning.config.StringHolderIdentitySupport.instance) "cmd,forEach,select,where,find")) b))))
(let ((ctx (getContext ctx "core"))) (let ((ctx (getContext ctx "Application"))) (homeCreateOrStore (.get ctx com.redknee.util.partitioning.config.BeanServiceMappingHome.class) (let ((b (com.redknee.util.partitioning.config.BeanServiceMapping.))) (setBeanProperty b "BeanClass" "com.redknee.app.crm.configshare.ConfigChangeRequest")(setBeanProperty b "ServiceName" "com.redknee.app.crm.configshare.ConfigChangeRequestHome") b))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Create default application partitions

(let ((ctx (getContext ctx "core"))) (let ((ctx (getContext ctx "Application"))) (homeCreateOrStore (.get ctx com.redknee.util.partitioning.config.PartitionEntityHome.class) (let ((b (com.redknee.util.partitioning.config.PartitionEntity.))) (setBeanProperty b "PartitionID" "Nowhere")(setBeanProperty b "PartitionType" (com.redknee.util.partitioning.config.PartitionTypeEnum.get 2s))(setBeanProperty b "Nodes" (let ((c (java.util.ArrayList.)))  c))(setBeanProperty b "ChildPartitions" (let ((c (java.util.ArrayList.))) c))(setBeanProperty b "ThreadpoolConfig" (let ((b (getBeanProperty b "threadpoolConfig"))) (setBeanProperty b "ThrottlingConfig" (let ((b (getBeanProperty b "throttlingConfig")))  b)) b))(setBeanProperty b "Beans" (MapSupport.fromList (let ((c (java.util.ArrayList.)))  c))) b))))
(let ((ctx (getContext ctx "core"))) (let ((ctx (getContext ctx "Application"))) (homeCreateOrStore (.get ctx com.redknee.util.partitioning.config.PartitionEntityHome.class) (let ((b (com.redknee.util.partitioning.config.PartitionEntity.))) (setBeanProperty b "PartitionID" "AppCrm")(setBeanProperty b "Nodes" (let ((c (java.util.ArrayList.))) (.add c (let ((b (com.redknee.util.partitioning.config.RemotePartitionNode.)))(setBeanProperty b "HostName" "RKCRM1")(setBeanProperty b "Port" 9264) b)) c))(setBeanProperty b "ChildPartitions" (let ((c (java.util.ArrayList.)))  c))(setBeanProperty b "ThreadpoolConfig" (let ((b (getBeanProperty b "threadpoolConfig"))) (setBeanProperty b "ThrottlingConfig" (let ((b (getBeanProperty b "throttlingConfig")))  b)) b))(setBeanProperty b "Beans" (MapSupport.fromList (let ((c (java.util.ArrayList.)))  c))) b))))
(let ((ctx (getContext ctx "core"))) (let ((ctx (getContext ctx "Application"))) (homeCreateOrStore (.get ctx com.redknee.util.partitioning.config.PartitionEntityHome.class) (let ((b (com.redknee.util.partitioning.config.PartitionEntity.))) (setBeanProperty b "PartitionID" "AppCrmInvoice")(setBeanProperty b "Nodes" (let ((c (java.util.ArrayList.))) (.add c (let ((b (com.redknee.util.partitioning.config.RemotePartitionNode.)))(setBeanProperty b "HostName" "RKINVOICE1")(setBeanProperty b "Port" 11104) b)) c))(setBeanProperty b "ChildPartitions" (let ((c (java.util.ArrayList.)))  c))(setBeanProperty b "ThreadpoolConfig" (let ((b (getBeanProperty b "threadpoolConfig"))) (setBeanProperty b "ThrottlingConfig" (let ((b (getBeanProperty b "throttlingConfig")))  b)) b))(setBeanProperty b "Beans" (MapSupport.fromList (let ((c (java.util.ArrayList.)))  c))) b))))
(let ((ctx (getContext ctx "core"))) (let ((ctx (getContext ctx "Application"))) (homeCreateOrStore (.get ctx com.redknee.util.partitioning.config.PartitionEntityHome.class) (let ((b (com.redknee.util.partitioning.config.PartitionEntity.))) (setBeanProperty b "PartitionID" "AppCrmMediation")(setBeanProperty b "Nodes" (let ((c (java.util.ArrayList.))) (.add c (let ((b (com.redknee.util.partitioning.config.RemotePartitionNode.)))(setBeanProperty b "HostName" "RKINVOICE1")(setBeanProperty b "Port" 9344) b)) c))(setBeanProperty b "ChildPartitions" (let ((c (java.util.ArrayList.)))  c))(setBeanProperty b "ThreadpoolConfig" (let ((b (getBeanProperty b "threadpoolConfig"))) (setBeanProperty b "ThrottlingConfig" (let ((b (getBeanProperty b "throttlingConfig")))  b)) b))(setBeanProperty b "Beans" (MapSupport.fromList (let ((c (java.util.ArrayList.)))  c))) b))))
(let ((ctx (getContext ctx "core"))) (let ((ctx (getContext ctx "Application"))) (homeCreateOrStore (.get ctx com.redknee.util.partitioning.config.PartitionEntityHome.class) (let ((b (com.redknee.util.partitioning.config.PartitionEntity.))) (setBeanProperty b "PartitionID" "AppCrmProvision")(setBeanProperty b "Nodes" (let ((c (java.util.ArrayList.))) (.add c (let ((b (com.redknee.util.partitioning.config.RemotePartitionNode.)))(setBeanProperty b "HostName" "RKCRM1")(setBeanProperty b "Port" 12004) b)) c))(setBeanProperty b "ChildPartitions" (let ((c (java.util.ArrayList.)))  c))(setBeanProperty b "ThreadpoolConfig" (let ((b (getBeanProperty b "threadpoolConfig"))) (setBeanProperty b "ThrottlingConfig"(let ((b (getBeanProperty b "throttlingConfig")))  b)) b))(setBeanProperty b "Beans" (MapSupport.fromList (let ((c (java.util.ArrayList.)))  c))) b))))
(let ((ctx (getContext ctx "core"))) (let ((ctx (getContext ctx "Application"))) (homeCreateOrStore (.get ctx com.redknee.util.partitioning.config.PartitionEntityHome.class) (let ((b (com.redknee.util.partitioning.config.PartitionEntity.))) (setBeanProperty b "PartitionID" "AppSyncTool")(setBeanProperty b "Nodes" (let ((c (java.util.ArrayList.))) (.add c (let ((b (com.redknee.util.partitioning.config.RemotePartitionNode.)))(setBeanProperty b "HostName" "RKSYNC1")(setBeanProperty b "Port" 9994) b)) c))(setBeanProperty b "ChildPartitions" (let ((c (java.util.ArrayList.)))  c))(setBeanProperty b "ThreadpoolConfig" (let ((b (getBeanProperty b "threadpoolConfig"))) (setBeanProperty b "ThrottlingConfig" (let ((b (getBeanProperty b "throttlingConfig")))  b)) b))(setBeanProperty b "Beans" (MapSupport.fromList (let ((c (java.util.ArrayList.)))  c))) b))))


;; Create default redundant partitions.  There needs to be one for every combination of application partitions defined above

(let ((ctx (getContext ctx "core"))) (let ((ctx (getContext ctx "Application"))) (homeCreateOrStore (.get ctx com.redknee.util.partitioning.config.PartitionEntityHome.class) 
    (let ((b (com.redknee.util.partitioning.config.PartitionEntity.))) 
        (setBeanProperty b "PartitionID" "BSS & IS")
        (setBeanProperty b "PartitionType" (com.redknee.util.partitioning.config.PartitionTypeEnum.get 2s))
        (setBeanProperty b "Nodes" (let ((c (java.util.ArrayList.)))  c))
            (setBeanProperty b "ChildPartitions" (let ((c (java.util.ArrayList.))) 
                (.add c (let ((b (com.redknee.util.partitioning.config.RedundantPartition.)))(setBeanProperty b "ChildPartition" "AppCrm") b))
                (.add c (let ((b (com.redknee.util.partitioning.config.RedundantPartition.)))(setBeanProperty b "ChildPartition" "AppCrmInvoice") b)) c))
        (setBeanProperty b "ThreadpoolConfig" (let ((b (getBeanProperty b "threadpoolConfig"))) (setBeanProperty b "ThrottlingConfig" (let ((b (getBeanProperty b "throttlingConfig")))  b)) b))(setBeanProperty b "Beans" (MapSupport.fromList (let ((c (java.util.ArrayList.)))  c))) b))))
        
(let ((ctx (getContext ctx "core"))) (let ((ctx (getContext ctx "Application"))) (homeCreateOrStore (.get ctx com.redknee.util.partitioning.config.PartitionEntityHome.class)
    (let ((b (com.redknee.util.partitioning.config.PartitionEntity.))) 
        (setBeanProperty b "PartitionID" "BSS & IS & Med")
        (setBeanProperty b "PartitionType" (com.redknee.util.partitioning.config.PartitionTypeEnum.get 2s))
        (setBeanProperty b "Nodes" (let ((c (java.util.ArrayList.)))  c))
            (setBeanProperty b "ChildPartitions" (let ((c (java.util.ArrayList.))) 
                (.add c (let ((b (com.redknee.util.partitioning.config.RedundantPartition.)))(setBeanProperty b "ChildPartition" "AppCrmInvoice") b))
                (.add c (let ((b (com.redknee.util.partitioning.config.RedundantPartition.)))(setBeanProperty b "ChildPartition" "AppCrmMediation") b))
                (.add c (let ((b (com.redknee.util.partitioning.config.RedundantPartition.)))(setBeanProperty b "ChildPartition" "AppCrm") b)) c))
        (setBeanProperty b "ThreadpoolConfig" (let ((b (getBeanProperty b "threadpoolConfig"))) (setBeanProperty b "ThrottlingConfig" (let ((b (getBeanProperty b "throttlingConfig")))  b)) b))(setBeanProperty b "Beans" (MapSupport.fromList (let ((c (java.util.ArrayList.)))  c))) b))))

(let ((ctx (getContext ctx "core"))) (let ((ctx (getContext ctx "Application"))) (homeCreateOrStore (.get ctx com.redknee.util.partitioning.config.PartitionEntityHome.class) 
    (let ((b (com.redknee.util.partitioning.config.PartitionEntity.))) 
        (setBeanProperty b "PartitionID" "BSS & IS & Prov")
        (setBeanProperty b "PartitionType" (com.redknee.util.partitioning.config.PartitionTypeEnum.get 2s))
        (setBeanProperty b "Nodes" (let ((c (java.util.ArrayList.)))  c))
            (setBeanProperty b "ChildPartitions" (let ((c (java.util.ArrayList.))) 
                (.add c (let ((b (com.redknee.util.partitioning.config.RedundantPartition.)))(setBeanProperty b "ChildPartition" "AppCrmInvoice") b))
                (.add c (let ((b (com.redknee.util.partitioning.config.RedundantPartition.)))(setBeanProperty b "ChildPartition" "AppCrmProvision") b))
                (.add c (let ((b (com.redknee.util.partitioning.config.RedundantPartition.)))(setBeanProperty b "ChildPartition" "AppCrm") b)) c))
        (setBeanProperty b "ThreadpoolConfig" (let ((b (getBeanProperty b "threadpoolConfig"))) (setBeanProperty b "ThrottlingConfig" (let ((b (getBeanProperty b "throttlingConfig")))  b)) b))(setBeanProperty b "Beans" (MapSupport.fromList (let ((c (java.util.ArrayList.)))  c))) b))))

(let ((ctx (getContext ctx "core"))) (let ((ctx (getContext ctx "Application"))) (homeCreateOrStore (.get ctx com.redknee.util.partitioning.config.PartitionEntityHome.class) 
    (let ((b (com.redknee.util.partitioning.config.PartitionEntity.))) 
        (setBeanProperty b "PartitionID" "BSS & Med")
        (setBeanProperty b "PartitionType" (com.redknee.util.partitioning.config.PartitionTypeEnum.get 2s))
        (setBeanProperty b "Nodes" (let ((c (java.util.ArrayList.)))  c))
            (setBeanProperty b "ChildPartitions" (let ((c (java.util.ArrayList.))) 
                (.add c (let ((b (com.redknee.util.partitioning.config.RedundantPartition.)))(setBeanProperty b "ChildPartition" "AppCrmMediation") b))
                (.add c (let ((b (com.redknee.util.partitioning.config.RedundantPartition.)))(setBeanProperty b "ChildPartition" "AppCrm") b)) c))
        (setBeanProperty b "ThreadpoolConfig" (let ((b (getBeanProperty b "threadpoolConfig"))) (setBeanProperty b "ThrottlingConfig" (let ((b (getBeanProperty b "throttlingConfig")))  b)) b))(setBeanProperty b "Beans" (MapSupport.fromList (let ((c (java.util.ArrayList.)))  c))) b))))

(let ((ctx (getContext ctx "core"))) (let ((ctx (getContext ctx "Application"))) (homeCreateOrStore (.get ctx com.redknee.util.partitioning.config.PartitionEntityHome.class) 
    (let ((b (com.redknee.util.partitioning.config.PartitionEntity.))) 
        (setBeanProperty b "PartitionID" "BSS & Med & Prov")
        (setBeanProperty b "PartitionType" (com.redknee.util.partitioning.config.PartitionTypeEnum.get 2s))
        (setBeanProperty b "Nodes" (let ((c (java.util.ArrayList.)))  c))
            (setBeanProperty b "ChildPartitions" (let ((c (java.util.ArrayList.))) 
                (.add c (let ((b (com.redknee.util.partitioning.config.RedundantPartition.)))(setBeanProperty b "ChildPartition" "AppCrmProvision") b))
                (.add c (let ((b (com.redknee.util.partitioning.config.RedundantPartition.)))(setBeanProperty b "ChildPartition" "AppCrmMediation") b))
                (.add c (let ((b (com.redknee.util.partitioning.config.RedundantPartition.)))(setBeanProperty b "ChildPartition" "AppCrm") b)) c))
        (setBeanProperty b "ThreadpoolConfig" (let ((b (getBeanProperty b "threadpoolConfig"))) (setBeanProperty b "ThrottlingConfig" (let ((b (getBeanProperty b "throttlingConfig")))  b)) b))(setBeanProperty b "Beans" (MapSupport.fromList (let ((c (java.util.ArrayList.)))  c))) b))))

(let ((ctx (getContext ctx "core"))) (let ((ctx (getContext ctx "Application"))) (homeCreateOrStore (.get ctx com.redknee.util.partitioning.config.PartitionEntityHome.class) 
    (let ((b (com.redknee.util.partitioning.config.PartitionEntity.))) 
        (setBeanProperty b "PartitionID" "BSS & Prov")
        (setBeanProperty b "PartitionType" (com.redknee.util.partitioning.config.PartitionTypeEnum.get 2s))
        (setBeanProperty b "Nodes" (let ((c (java.util.ArrayList.)))  c))
            (setBeanProperty b "ChildPartitions" (let ((c (java.util.ArrayList.))) 
                (.add c (let ((b (com.redknee.util.partitioning.config.RedundantPartition.)))(setBeanProperty b "ChildPartition" "AppCrmProvision") b))
                (.add c (let ((b (com.redknee.util.partitioning.config.RedundantPartition.)))(setBeanProperty b "ChildPartition" "AppCrm") b)) c))
        (setBeanProperty b "ThreadpoolConfig" (let ((b (getBeanProperty b "threadpoolConfig"))) (setBeanProperty b "ThrottlingConfig" (let ((b (getBeanProperty b "throttlingConfig")))  b)) b))(setBeanProperty b "Beans" (MapSupport.fromList (let ((c (java.util.ArrayList.)))  c))) b))))

(let ((ctx (getContext ctx "core"))) (let ((ctx (getContext ctx "Application"))) (homeCreateOrStore (.get ctx com.redknee.util.partitioning.config.PartitionEntityHome.class) 
    (let ((b (com.redknee.util.partitioning.config.PartitionEntity.))) 
        (setBeanProperty b "PartitionID" "Med & IS & Prov")
        (setBeanProperty b "PartitionType" (com.redknee.util.partitioning.config.PartitionTypeEnum.get 2s))
        (setBeanProperty b "Nodes" (let ((c (java.util.ArrayList.)))  c))
            (setBeanProperty b "ChildPartitions" (let ((c (java.util.ArrayList.))) 
                (.add c (let ((b (com.redknee.util.partitioning.config.RedundantPartition.)))(setBeanProperty b "ChildPartition" "AppCrmProvision") b))
                (.add c (let ((b (com.redknee.util.partitioning.config.RedundantPartition.)))(setBeanProperty b "ChildPartition" "AppCrmMediation") b))
                (.add c (let ((b (com.redknee.util.partitioning.config.RedundantPartition.)))(setBeanProperty b "ChildPartition" "AppCrmInvoice") b)) c))
        (setBeanProperty b "ThreadpoolConfig" (let ((b (getBeanProperty b "threadpoolConfig"))) (setBeanProperty b "ThrottlingConfig" (let ((b (getBeanProperty b "throttlingConfig")))  b)) b))(setBeanProperty b "Beans" (MapSupport.fromList (let ((c (java.util.ArrayList.)))  c))) b))))
        
(let ((ctx (getContext ctx "core"))) (let ((ctx (getContext ctx "Application"))) (homeCreateOrStore (.get ctx com.redknee.util.partitioning.config.PartitionEntityHome.class) 
    (let ((b (com.redknee.util.partitioning.config.PartitionEntity.))) 
        (setBeanProperty b "PartitionID" "Med & IS")
        (setBeanProperty b "PartitionType" (com.redknee.util.partitioning.config.PartitionTypeEnum.get 2s))
        (setBeanProperty b "Nodes" (let ((c (java.util.ArrayList.)))  c))
            (setBeanProperty b "ChildPartitions" (let ((c (java.util.ArrayList.))) 
                (.add c (let ((b (com.redknee.util.partitioning.config.RedundantPartition.)))(setBeanProperty b "ChildPartition" "AppCrmMediation") b))
                (.add c (let ((b (com.redknee.util.partitioning.config.RedundantPartition.)))(setBeanProperty b "ChildPartition" "AppCrmInvoice") b)) c))
        (setBeanProperty b "ThreadpoolConfig" (let ((b (getBeanProperty b "threadpoolConfig"))) (setBeanProperty b "ThrottlingConfig" (let ((b (getBeanProperty b "throttlingConfig")))  b)) b))(setBeanProperty b "Beans" (MapSupport.fromList (let ((c (java.util.ArrayList.)))  c))) b))))

(let ((ctx (getContext ctx "core"))) (let ((ctx (getContext ctx "Application"))) (homeCreateOrStore (.get ctx com.redknee.util.partitioning.config.PartitionEntityHome.class) 
    (let ((b (com.redknee.util.partitioning.config.PartitionEntity.))) 
        (setBeanProperty b "PartitionID" "Med & Prov")
        (setBeanProperty b "PartitionType" (com.redknee.util.partitioning.config.PartitionTypeEnum.get 2s))
        (setBeanProperty b "Nodes" (let ((c (java.util.ArrayList.)))  c))
            (setBeanProperty b "ChildPartitions" (let ((c (java.util.ArrayList.))) 
                (.add c (let ((b (com.redknee.util.partitioning.config.RedundantPartition.)))(setBeanProperty b "ChildPartition" "AppCrmMediation") b))
                (.add c (let ((b (com.redknee.util.partitioning.config.RedundantPartition.)))(setBeanProperty b "ChildPartition" "AppCrmProvision") b)) c))
        (setBeanProperty b "ThreadpoolConfig" (let ((b (getBeanProperty b "threadpoolConfig"))) (setBeanProperty b "ThrottlingConfig" (let ((b (getBeanProperty b "throttlingConfig")))  b)) b))(setBeanProperty b "Beans" (MapSupport.fromList (let ((c (java.util.ArrayList.)))  c))) b))))

(let ((ctx (getContext ctx "core"))) (let ((ctx (getContext ctx "Application"))) (homeCreateOrStore (.get ctx com.redknee.util.partitioning.config.PartitionEntityHome.class) 
    (let ((b (com.redknee.util.partitioning.config.PartitionEntity.))) 
        (setBeanProperty b "PartitionID" "IS & Prov")
        (setBeanProperty b "PartitionType" (com.redknee.util.partitioning.config.PartitionTypeEnum.get 2s))
        (setBeanProperty b "Nodes" (let ((c (java.util.ArrayList.)))  c))
            (setBeanProperty b "ChildPartitions" (let ((c (java.util.ArrayList.))) 
                (.add c (let ((b (com.redknee.util.partitioning.config.RedundantPartition.)))(setBeanProperty b "ChildPartition" "AppCrmProvision") b))
                (.add c (let ((b (com.redknee.util.partitioning.config.RedundantPartition.)))(setBeanProperty b "ChildPartition" "AppCrmInvoice") b)) c))
        (setBeanProperty b "ThreadpoolConfig" (let ((b (getBeanProperty b "threadpoolConfig"))) (setBeanProperty b "ThrottlingConfig" (let ((b (getBeanProperty b "throttlingConfig")))  b)) b))(setBeanProperty b "Beans" (MapSupport.fromList (let ((c (java.util.ArrayList.)))  c))) b))))
        
(let ((ctx (getContext ctx "core"))) (let ((ctx (getContext ctx "Application"))) (homeCreateOrStore (.get ctx com.redknee.util.partitioning.config.PartitionEntityHome.class) 
    (let ((b (com.redknee.util.partitioning.config.PartitionEntity.))) 
        (setBeanProperty b "PartitionID" "BSS & IS & Sync")
        (setBeanProperty b "PartitionType" (com.redknee.util.partitioning.config.PartitionTypeEnum.get 2s))
        (setBeanProperty b "Nodes" (let ((c (java.util.ArrayList.)))  c))
            (setBeanProperty b "ChildPartitions" (let ((c (java.util.ArrayList.))) 
                (.add c (let ((b (com.redknee.util.partitioning.config.RedundantPartition.)))(setBeanProperty b "ChildPartition" "AppCrm") b))
                (.add c (let ((b (com.redknee.util.partitioning.config.RedundantPartition.)))(setBeanProperty b "ChildPartition" "AppCrmInvoice") b))
                (.add c (let ((b (com.redknee.util.partitioning.config.RedundantPartition.)))(setBeanProperty b "ChildPartition" "AppSyncTool") b)) c))
        (setBeanProperty b "ThreadpoolConfig" (let ((b (getBeanProperty b "threadpoolConfig"))) (setBeanProperty b "ThrottlingConfig" (let ((b (getBeanProperty b "throttlingConfig")))  b)) b))(setBeanProperty b "Beans" (MapSupport.fromList (let ((c (java.util.ArrayList.)))  c))) b))))
        
(let ((ctx (getContext ctx "core"))) (let ((ctx (getContext ctx "Application"))) (homeCreateOrStore (.get ctx com.redknee.util.partitioning.config.PartitionEntityHome.class)
    (let ((b (com.redknee.util.partitioning.config.PartitionEntity.))) 
        (setBeanProperty b "PartitionID" "BSS & IS & Med & Sync")
        (setBeanProperty b "PartitionType" (com.redknee.util.partitioning.config.PartitionTypeEnum.get 2s))
        (setBeanProperty b "Nodes" (let ((c (java.util.ArrayList.)))  c))
            (setBeanProperty b "ChildPartitions" (let ((c (java.util.ArrayList.))) 
                (.add c (let ((b (com.redknee.util.partitioning.config.RedundantPartition.)))(setBeanProperty b "ChildPartition" "AppCrmInvoice") b))
                (.add c (let ((b (com.redknee.util.partitioning.config.RedundantPartition.)))(setBeanProperty b "ChildPartition" "AppCrmMediation") b))
                (.add c (let ((b (com.redknee.util.partitioning.config.RedundantPartition.)))(setBeanProperty b "ChildPartition" "AppCrm") b))
                (.add c (let ((b (com.redknee.util.partitioning.config.RedundantPartition.)))(setBeanProperty b "ChildPartition" "AppSyncTool") b)) c))
        (setBeanProperty b "ThreadpoolConfig" (let ((b (getBeanProperty b "threadpoolConfig"))) (setBeanProperty b "ThrottlingConfig" (let ((b (getBeanProperty b "throttlingConfig")))  b)) b))(setBeanProperty b "Beans" (MapSupport.fromList (let ((c (java.util.ArrayList.)))  c))) b))))

(let ((ctx (getContext ctx "core"))) (let ((ctx (getContext ctx "Application"))) (homeCreateOrStore (.get ctx com.redknee.util.partitioning.config.PartitionEntityHome.class) 
    (let ((b (com.redknee.util.partitioning.config.PartitionEntity.))) 
        (setBeanProperty b "PartitionID" "BSS & IS & Prov & Sync")
        (setBeanProperty b "PartitionType" (com.redknee.util.partitioning.config.PartitionTypeEnum.get 2s))
        (setBeanProperty b "Nodes" (let ((c (java.util.ArrayList.)))  c))
            (setBeanProperty b "ChildPartitions" (let ((c (java.util.ArrayList.))) 
                (.add c (let ((b (com.redknee.util.partitioning.config.RedundantPartition.)))(setBeanProperty b "ChildPartition" "AppCrmInvoice") b))
                (.add c (let ((b (com.redknee.util.partitioning.config.RedundantPartition.)))(setBeanProperty b "ChildPartition" "AppCrmProvision") b))
                (.add c (let ((b (com.redknee.util.partitioning.config.RedundantPartition.)))(setBeanProperty b "ChildPartition" "AppCrm") b))
                (.add c (let ((b (com.redknee.util.partitioning.config.RedundantPartition.)))(setBeanProperty b "ChildPartition" "AppSyncTool") b)) c))
        (setBeanProperty b "ThreadpoolConfig" (let ((b (getBeanProperty b "threadpoolConfig"))) (setBeanProperty b "ThrottlingConfig" (let ((b (getBeanProperty b "throttlingConfig")))  b)) b))(setBeanProperty b "Beans" (MapSupport.fromList (let ((c (java.util.ArrayList.)))  c))) b))))

(let ((ctx (getContext ctx "core"))) (let ((ctx (getContext ctx "Application"))) (homeCreateOrStore (.get ctx com.redknee.util.partitioning.config.PartitionEntityHome.class) 
    (let ((b (com.redknee.util.partitioning.config.PartitionEntity.))) 
        (setBeanProperty b "PartitionID" "BSS & Med & Sync")
        (setBeanProperty b "PartitionType" (com.redknee.util.partitioning.config.PartitionTypeEnum.get 2s))
        (setBeanProperty b "Nodes" (let ((c (java.util.ArrayList.)))  c))
            (setBeanProperty b "ChildPartitions" (let ((c (java.util.ArrayList.))) 
                (.add c (let ((b (com.redknee.util.partitioning.config.RedundantPartition.)))(setBeanProperty b "ChildPartition" "AppCrmMediation") b))
                (.add c (let ((b (com.redknee.util.partitioning.config.RedundantPartition.)))(setBeanProperty b "ChildPartition" "AppCrm") b))
                (.add c (let ((b (com.redknee.util.partitioning.config.RedundantPartition.)))(setBeanProperty b "ChildPartition" "AppSyncTool") b)) c))
        (setBeanProperty b "ThreadpoolConfig" (let ((b (getBeanProperty b "threadpoolConfig"))) (setBeanProperty b "ThrottlingConfig" (let ((b (getBeanProperty b "throttlingConfig")))  b)) b))(setBeanProperty b "Beans" (MapSupport.fromList (let ((c (java.util.ArrayList.)))  c))) b))))

(let ((ctx (getContext ctx "core"))) (let ((ctx (getContext ctx "Application"))) (homeCreateOrStore (.get ctx com.redknee.util.partitioning.config.PartitionEntityHome.class) 
    (let ((b (com.redknee.util.partitioning.config.PartitionEntity.))) 
        (setBeanProperty b "PartitionID" "BSS & Med & Prov & Sync")
        (setBeanProperty b "PartitionType" (com.redknee.util.partitioning.config.PartitionTypeEnum.get 2s))
        (setBeanProperty b "Nodes" (let ((c (java.util.ArrayList.)))  c))
            (setBeanProperty b "ChildPartitions" (let ((c (java.util.ArrayList.))) 
                (.add c (let ((b (com.redknee.util.partitioning.config.RedundantPartition.)))(setBeanProperty b "ChildPartition" "AppCrmProvision") b))
                (.add c (let ((b (com.redknee.util.partitioning.config.RedundantPartition.)))(setBeanProperty b "ChildPartition" "AppCrmMediation") b))
                (.add c (let ((b (com.redknee.util.partitioning.config.RedundantPartition.)))(setBeanProperty b "ChildPartition" "AppCrm") b))
                (.add c (let ((b (com.redknee.util.partitioning.config.RedundantPartition.)))(setBeanProperty b "ChildPartition" "AppSyncTool") b)) c))
        (setBeanProperty b "ThreadpoolConfig" (let ((b (getBeanProperty b "threadpoolConfig"))) (setBeanProperty b "ThrottlingConfig" (let ((b (getBeanProperty b "throttlingConfig")))  b)) b))(setBeanProperty b "Beans" (MapSupport.fromList (let ((c (java.util.ArrayList.)))  c))) b))))

(let ((ctx (getContext ctx "core"))) (let ((ctx (getContext ctx "Application"))) (homeCreateOrStore (.get ctx com.redknee.util.partitioning.config.PartitionEntityHome.class) 
    (let ((b (com.redknee.util.partitioning.config.PartitionEntity.))) 
        (setBeanProperty b "PartitionID" "BSS & Prov & Sync")
        (setBeanProperty b "PartitionType" (com.redknee.util.partitioning.config.PartitionTypeEnum.get 2s))
        (setBeanProperty b "Nodes" (let ((c (java.util.ArrayList.)))  c))
            (setBeanProperty b "ChildPartitions" (let ((c (java.util.ArrayList.))) 
                (.add c (let ((b (com.redknee.util.partitioning.config.RedundantPartition.)))(setBeanProperty b "ChildPartition" "AppCrmProvision") b))
                (.add c (let ((b (com.redknee.util.partitioning.config.RedundantPartition.)))(setBeanProperty b "ChildPartition" "AppCrm") b))
                (.add c (let ((b (com.redknee.util.partitioning.config.RedundantPartition.)))(setBeanProperty b "ChildPartition" "AppSyncTool") b)) c))
        (setBeanProperty b "ThreadpoolConfig" (let ((b (getBeanProperty b "threadpoolConfig"))) (setBeanProperty b "ThrottlingConfig" (let ((b (getBeanProperty b "throttlingConfig")))  b)) b))(setBeanProperty b "Beans" (MapSupport.fromList (let ((c (java.util.ArrayList.)))  c))) b))))

(let ((ctx (getContext ctx "core"))) (let ((ctx (getContext ctx "Application"))) (homeCreateOrStore (.get ctx com.redknee.util.partitioning.config.PartitionEntityHome.class) 
    (let ((b (com.redknee.util.partitioning.config.PartitionEntity.))) 
        (setBeanProperty b "PartitionID" "Med & IS & Prov & Sync")
        (setBeanProperty b "PartitionType" (com.redknee.util.partitioning.config.PartitionTypeEnum.get 2s))
        (setBeanProperty b "Nodes" (let ((c (java.util.ArrayList.)))  c))
            (setBeanProperty b "ChildPartitions" (let ((c (java.util.ArrayList.))) 
                (.add c (let ((b (com.redknee.util.partitioning.config.RedundantPartition.)))(setBeanProperty b "ChildPartition" "AppCrmProvision") b))
                (.add c (let ((b (com.redknee.util.partitioning.config.RedundantPartition.)))(setBeanProperty b "ChildPartition" "AppCrmMediation") b))
                (.add c (let ((b (com.redknee.util.partitioning.config.RedundantPartition.)))(setBeanProperty b "ChildPartition" "AppCrmInvoice") b))
                (.add c (let ((b (com.redknee.util.partitioning.config.RedundantPartition.)))(setBeanProperty b "ChildPartition" "AppSyncTool") b)) c))
        (setBeanProperty b "ThreadpoolConfig" (let ((b (getBeanProperty b "threadpoolConfig"))) (setBeanProperty b "ThrottlingConfig" (let ((b (getBeanProperty b "throttlingConfig")))  b)) b))(setBeanProperty b "Beans" (MapSupport.fromList (let ((c (java.util.ArrayList.)))  c))) b))))
        
(let ((ctx (getContext ctx "core"))) (let ((ctx (getContext ctx "Application"))) (homeCreateOrStore (.get ctx com.redknee.util.partitioning.config.PartitionEntityHome.class) 
    (let ((b (com.redknee.util.partitioning.config.PartitionEntity.))) 
        (setBeanProperty b "PartitionID" "Med & IS & Sync")
        (setBeanProperty b "PartitionType" (com.redknee.util.partitioning.config.PartitionTypeEnum.get 2s))
        (setBeanProperty b "Nodes" (let ((c (java.util.ArrayList.)))  c))
            (setBeanProperty b "ChildPartitions" (let ((c (java.util.ArrayList.))) 
                (.add c (let ((b (com.redknee.util.partitioning.config.RedundantPartition.)))(setBeanProperty b "ChildPartition" "AppCrmMediation") b))
                (.add c (let ((b (com.redknee.util.partitioning.config.RedundantPartition.)))(setBeanProperty b "ChildPartition" "AppCrmInvoice") b))
                (.add c (let ((b (com.redknee.util.partitioning.config.RedundantPartition.)))(setBeanProperty b "ChildPartition" "AppSyncTool") b)) c))
        (setBeanProperty b "ThreadpoolConfig" (let ((b (getBeanProperty b "threadpoolConfig"))) (setBeanProperty b "ThrottlingConfig" (let ((b (getBeanProperty b "throttlingConfig")))  b)) b))(setBeanProperty b "Beans" (MapSupport.fromList (let ((c (java.util.ArrayList.)))  c))) b))))

(let ((ctx (getContext ctx "core"))) (let ((ctx (getContext ctx "Application"))) (homeCreateOrStore (.get ctx com.redknee.util.partitioning.config.PartitionEntityHome.class) 
    (let ((b (com.redknee.util.partitioning.config.PartitionEntity.))) 
        (setBeanProperty b "PartitionID" "Med & Prov & Sync")
        (setBeanProperty b "PartitionType" (com.redknee.util.partitioning.config.PartitionTypeEnum.get 2s))
        (setBeanProperty b "Nodes" (let ((c (java.util.ArrayList.)))  c))
            (setBeanProperty b "ChildPartitions" (let ((c (java.util.ArrayList.))) 
                (.add c (let ((b (com.redknee.util.partitioning.config.RedundantPartition.)))(setBeanProperty b "ChildPartition" "AppCrmMediation") b))
                (.add c (let ((b (com.redknee.util.partitioning.config.RedundantPartition.)))(setBeanProperty b "ChildPartition" "AppCrmProvision") b))
                (.add c (let ((b (com.redknee.util.partitioning.config.RedundantPartition.)))(setBeanProperty b "ChildPartition" "AppSyncTool") b)) c))
        (setBeanProperty b "ThreadpoolConfig" (let ((b (getBeanProperty b "threadpoolConfig"))) (setBeanProperty b "ThrottlingConfig" (let ((b (getBeanProperty b "throttlingConfig")))  b)) b))(setBeanProperty b "Beans" (MapSupport.fromList (let ((c (java.util.ArrayList.)))  c))) b))))

(let ((ctx (getContext ctx "core"))) (let ((ctx (getContext ctx "Application"))) (homeCreateOrStore (.get ctx com.redknee.util.partitioning.config.PartitionEntityHome.class) 
    (let ((b (com.redknee.util.partitioning.config.PartitionEntity.))) 
        (setBeanProperty b "PartitionID" "IS & Prov & Sync")
        (setBeanProperty b "PartitionType" (com.redknee.util.partitioning.config.PartitionTypeEnum.get 2s))
        (setBeanProperty b "Nodes" (let ((c (java.util.ArrayList.)))  c))
            (setBeanProperty b "ChildPartitions" (let ((c (java.util.ArrayList.))) 
                (.add c (let ((b (com.redknee.util.partitioning.config.RedundantPartition.)))(setBeanProperty b "ChildPartition" "AppCrmProvision") b))
                (.add c (let ((b (com.redknee.util.partitioning.config.RedundantPartition.)))(setBeanProperty b "ChildPartition" "AppCrmInvoice") b))
                (.add c (let ((b (com.redknee.util.partitioning.config.RedundantPartition.)))(setBeanProperty b "ChildPartition" "AppSyncTool") b)) c))
        (setBeanProperty b "ThreadpoolConfig" (let ((b (getBeanProperty b "threadpoolConfig"))) (setBeanProperty b "ThrottlingConfig" (let ((b (getBeanProperty b "throttlingConfig")))  b)) b))(setBeanProperty b "Beans" (MapSupport.fromList (let ((c (java.util.ArrayList.)))  c))) b))))

(let ((ctx (getContext ctx "core"))) (let ((ctx (getContext ctx "Application"))) (homeCreateOrStore (.get ctx com.redknee.util.partitioning.config.PartitionEntityHome.class) 
    (let ((b (com.redknee.util.partitioning.config.PartitionEntity.))) 
        (setBeanProperty b "PartitionID" "BSS & Sync")
        (setBeanProperty b "PartitionType" (com.redknee.util.partitioning.config.PartitionTypeEnum.get 2s))
        (setBeanProperty b "Nodes" (let ((c (java.util.ArrayList.)))  c))
            (setBeanProperty b "ChildPartitions" (let ((c (java.util.ArrayList.)))   
                (.add c (let ((b (com.redknee.util.partitioning.config.RedundantPartition.)))(setBeanProperty b "ChildPartition" "AppCrm") b))
                (.add c (let ((b (com.redknee.util.partitioning.config.RedundantPartition.)))(setBeanProperty b "ChildPartition" "AppSyncTool") b)) c))
        (setBeanProperty b "ThreadpoolConfig" (let ((b (getBeanProperty b "threadpoolConfig"))) (setBeanProperty b "ThrottlingConfig" (let ((b (getBeanProperty b "throttlingConfig")))  b)) b))(setBeanProperty b "Beans" (MapSupport.fromList (let ((c (java.util.ArrayList.)))  c))) b))))

(let ((ctx (getContext ctx "core"))) (let ((ctx (getContext ctx "Application"))) (homeCreateOrStore (.get ctx com.redknee.util.partitioning.config.PartitionEntityHome.class) 
    (let ((b (com.redknee.util.partitioning.config.PartitionEntity.))) 
        (setBeanProperty b "PartitionID" "IS & Sync")
        (setBeanProperty b "PartitionType" (com.redknee.util.partitioning.config.PartitionTypeEnum.get 2s))
        (setBeanProperty b "Nodes" (let ((c (java.util.ArrayList.)))  c))
            (setBeanProperty b "ChildPartitions" (let ((c (java.util.ArrayList.))) 
                (.add c (let ((b (com.redknee.util.partitioning.config.RedundantPartition.)))(setBeanProperty b "ChildPartition" "AppCrmInvoice") b))
                (.add c (let ((b (com.redknee.util.partitioning.config.RedundantPartition.)))(setBeanProperty b "ChildPartition" "AppSyncTool") b)) c))
        (setBeanProperty b "ThreadpoolConfig" (let ((b (getBeanProperty b "threadpoolConfig"))) (setBeanProperty b "ThrottlingConfig" (let ((b (getBeanProperty b "throttlingConfig")))  b)) b))(setBeanProperty b "Beans" (MapSupport.fromList (let ((c (java.util.ArrayList.)))  c))) b))))

(let ((ctx (getContext ctx "core"))) (let ((ctx (getContext ctx "Application"))) (homeCreateOrStore (.get ctx com.redknee.util.partitioning.config.PartitionEntityHome.class) 
    (let ((b (com.redknee.util.partitioning.config.PartitionEntity.))) 
        (setBeanProperty b "PartitionID" "Med & Sync")
        (setBeanProperty b "PartitionType" (com.redknee.util.partitioning.config.PartitionTypeEnum.get 2s))
        (setBeanProperty b "Nodes" (let ((c (java.util.ArrayList.)))  c))
            (setBeanProperty b "ChildPartitions" (let ((c (java.util.ArrayList.))) 
                (.add c (let ((b (com.redknee.util.partitioning.config.RedundantPartition.)))(setBeanProperty b "ChildPartition" "AppCrmMediation") b))
                (.add c (let ((b (com.redknee.util.partitioning.config.RedundantPartition.)))(setBeanProperty b "ChildPartition" "AppSyncTool") b)) c))
        (setBeanProperty b "ThreadpoolConfig" (let ((b (getBeanProperty b "threadpoolConfig"))) (setBeanProperty b "ThrottlingConfig" (let ((b (getBeanProperty b "throttlingConfig")))  b)) b))(setBeanProperty b "Beans" (MapSupport.fromList (let ((c (java.util.ArrayList.)))  c))) b))))

(let ((ctx (getContext ctx "core"))) (let ((ctx (getContext ctx "Application"))) (homeCreateOrStore (.get ctx com.redknee.util.partitioning.config.PartitionEntityHome.class) 
    (let ((b (com.redknee.util.partitioning.config.PartitionEntity.))) 
        (setBeanProperty b "PartitionID" "Prov & Sync")
        (setBeanProperty b "PartitionType" (com.redknee.util.partitioning.config.PartitionTypeEnum.get 2s))
        (setBeanProperty b "Nodes" (let ((c (java.util.ArrayList.)))  c))
            (setBeanProperty b "ChildPartitions" (let ((c (java.util.ArrayList.))) 
                (.add c (let ((b (com.redknee.util.partitioning.config.RedundantPartition.)))(setBeanProperty b "ChildPartition" "AppCrmProvision") b))
                (.add c (let ((b (com.redknee.util.partitioning.config.RedundantPartition.)))(setBeanProperty b "ChildPartition" "AppSyncTool") b)) c))
        (setBeanProperty b "ThreadpoolConfig" (let ((b (getBeanProperty b "threadpoolConfig"))) (setBeanProperty b "ThrottlingConfig" (let ((b (getBeanProperty b "throttlingConfig")))  b)) b))(setBeanProperty b "Beans" (MapSupport.fromList (let ((c (java.util.ArrayList.)))  c))) b))))

(let ((ctx (getContext ctx "core"))) (let ((ctx (getContext ctx "app"))) (homeCreateOrStore (.get ctx 
com.redknee.util.partitioning.config.PartitionEntityHome.class) 
	(let ((b (com.redknee.util.partitioning.config.PartitionEntity.))) 
		(setBeanProperty b "PartitionID" "AppIvp")
		(setBeanProperty b "Nodes" (let ((c (java.util.ArrayList.))) 
		(.add c (let ((b (com.redknee.util.partitioning.config.RemotePartitionNode.)))
			(setBeanProperty b "HostName" "RKIVP1")
			(setBeanProperty b "Port" 10564) b)) c))
		(setBeanProperty b "ChildPartitions" (let ((c (java.util.ArrayList.)))  c))
		(setBeanProperty b "ThreadpoolConfig" (let ((b (getBeanProperty b "threadpoolConfig"))) 
			(setBeanProperty b "ThrottlingConfig" (let ((b (getBeanProperty b "throttlingConfig")))  
			b)) 
		b))
		(setBeanProperty b "Beans" (MapSupport.fromList (let ((c (java.util.ArrayList.)))  
		c))) 
b)))) 

(let ((ctx (getContext ctx "core"))) (let ((ctx (getContext ctx "app"))) (homeCreateOrStore (.get ctx 
com.redknee.util.partitioning.config.PartitionEntityHome.class) 
	(let ((b (com.redknee.util.partitioning.config.PartitionEntity.))) 
		(setBeanProperty b "PartitionID" "AppIvp & AppSyncTool")
		(setBeanProperty b "PartitionType" (com.redknee.util.partitioning.config.PartitionTypeEnum.get 2s))
		(setBeanProperty b "Nodes" (let ((c (java.util.ArrayList.)))  c))
			(setBeanProperty b "ChildPartitions" (let ((c (java.util.ArrayList.))) 
				(.add c (let ((b (com.redknee.util.partitioning.config.RedundantPartition.)))(setBeanProperty b "ChildPartition" "AppIvp") b))
				(.add c (let ((b (com.redknee.util.partitioning.config.RedundantPartition.)))(setBeanProperty b "ChildPartition" "AppSyncTool") b))c))
		(setBeanProperty b "ThreadpoolConfig" (let ((b (getBeanProperty b "threadpoolConfig"))) (setBeanProperty b "ThrottlingConfig" (let ((b (getBeanProperty b "throttlingConfig")))  b)) b))(setBeanProperty b "Beans" (MapSupport.fromList (let ((c (java.util.ArrayList.)))  c))) b))))
    
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;; Rule that sends stuff to the 'Nowhere' partition.  Useful for features during development.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(let ((ctx (getContext ctx "core"))) (let ((ctx (getContext ctx "Application"))) (homeCreateOrStore (.get ctx com.redknee.util.partitioning.partition.rules.RoutingRuleHome.class) (let ((b (com.redknee.util.partitioning.partition.rules.RoutingRule.))) 
    (setBeanProperty b "Name" "Send to Nowhere")
    (setBeanProperty b "Rule" (let ((b (com.redknee.util.partitioning.partition.rules.AndRule.))) 
        (setBeanProperty b "Rules" (let ((c (java.util.ArrayList.))) 
            (.add c (let ((b (com.redknee.util.partitioning.partition.rules.RuleHolder.)))
                (setBeanProperty b "Rule" (let ((b (com.redknee.app.crm.configshare.ConfigSharingRoutingRule.))) 
                    (setBeanProperty b "BeanIdentifiers" (MapSupport.fromList (let ((c (java.util.ArrayList.))) 
                        c)))
                (setBeanProperty b "MatchStrength" -100) b)) b)) 
            c)) b))
    (setBeanProperty b "PartitionId" "Nowhere")
    (setBeanProperty b "CommitTimestamp" 1274308753981L)
    (setBeanProperty b "NewRule" (let ((b (com.redknee.util.partitioning.partition.rules.AndRule.))) 
        (setBeanProperty b "Rules" (let ((c (java.util.ArrayList.))) 
            (.add c (let ((b (com.redknee.util.partitioning.partition.rules.RuleHolder.)))
                (setBeanProperty b "Rule" (let ((b (com.redknee.app.crm.configshare.ConfigSharingRoutingRule.))) 
                    (setBeanProperty b "BeanIdentifiers" (MapSupport.fromList (let ((c (java.util.ArrayList.))) 
                        c)))
                (setBeanProperty b "MatchStrength" -100) b)) b)) 
            c)) b))
    (setBeanProperty b "NewPartitionId" "Nowhere")
    (setBeanProperty b "PendingTimestamp" 1274308753981L) b))))
